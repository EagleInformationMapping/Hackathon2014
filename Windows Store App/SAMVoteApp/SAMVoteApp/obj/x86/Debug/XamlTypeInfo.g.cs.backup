//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace SAMVoteApp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace SAMVoteApp.SAMVoteApp_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[255];
            _typeNameTable[0] = "Telerik.UI.Xaml.Controls.Grid.RadDataGrid";
            _typeNameTable[1] = "Telerik.UI.Xaml.Controls.RadControl";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode";
            _typeNameTable[5] = "System.Enum";
            _typeNameTable[6] = "System.ValueType";
            _typeNameTable[7] = "Object";
            _typeNameTable[8] = "Telerik.UI.Xaml.Controls.Grid.DataGridColumnCollection";
            _typeNameTable[9] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>";
            _typeNameTable[10] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>";
            _typeNameTable[11] = "Telerik.UI.Xaml.Controls.Grid.DataGridColumn";
            _typeNameTable[12] = "Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject";
            _typeNameTable[13] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[14] = "Windows.UI.Xaml.Style";
            _typeNameTable[15] = "Windows.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[16] = "String";
            _typeNameTable[17] = "Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode";
            _typeNameTable[18] = "Double";
            _typeNameTable[19] = "Telerik.UI.Xaml.Controls.Grid.SortDirection";
            _typeNameTable[20] = "Telerik.Data.Core.BatchLoadingMode";
            _typeNameTable[21] = "Telerik.UI.Xaml.Controls.Grid.SortDescriptorCollection";
            _typeNameTable[22] = "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>";
            _typeNameTable[23] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>";
            _typeNameTable[24] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>";
            _typeNameTable[25] = "Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase";
            _typeNameTable[26] = "Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor";
            _typeNameTable[27] = "Telerik.UI.Xaml.Controls.Grid.DataDescriptor";
            _typeNameTable[28] = "Telerik.Core.ViewModelBase";
            _typeNameTable[29] = "Telerik.Data.Core.SortOrder";
            _typeNameTable[30] = "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorCollection";
            _typeNameTable[31] = "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>";
            _typeNameTable[32] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>";
            _typeNameTable[33] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>";
            _typeNameTable[34] = "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase";
            _typeNameTable[35] = "Telerik.UI.Xaml.Controls.Grid.FilterDescriptorCollection";
            _typeNameTable[36] = "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>";
            _typeNameTable[37] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>";
            _typeNameTable[38] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>";
            _typeNameTable[39] = "Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase";
            _typeNameTable[40] = "Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorCollection";
            _typeNameTable[41] = "Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>";
            _typeNameTable[42] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>";
            _typeNameTable[43] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>";
            _typeNameTable[44] = "Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase";
            _typeNameTable[45] = "Telerik.UI.Xaml.Controls.Grid.DataGridUserEditMode";
            _typeNameTable[46] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[47] = "Telerik.UI.Xaml.Controls.Primitives.ObjectSelector`1<Windows.UI.Xaml.Media.Brush>";
            _typeNameTable[48] = "Int32";
            _typeNameTable[49] = "Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility";
            _typeNameTable[50] = "Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit";
            _typeNameTable[51] = "Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode";
            _typeNameTable[52] = "System.Collections.ObjectModel.ObservableCollection`1<Object>";
            _typeNameTable[53] = "System.Collections.ObjectModel.Collection`1<Object>";
            _typeNameTable[54] = "Telerik.UI.Xaml.Controls.Grid.DataGridUserFilterMode";
            _typeNameTable[55] = "Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode";
            _typeNameTable[56] = "Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode";
            _typeNameTable[57] = "Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode";
            _typeNameTable[58] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[59] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[60] = "Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>";
            _typeNameTable[61] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Grid.RadDataGrid, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>";
            _typeNameTable[62] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>";
            _typeNameTable[63] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>";
            _typeNameTable[64] = "Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>";
            _typeNameTable[65] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>";
            _typeNameTable[66] = "Telerik.UI.Xaml.Controls.Grid.Commands.CommandService";
            _typeNameTable[67] = "Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>";
            _typeNameTable[68] = "Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>";
            _typeNameTable[69] = "Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior";
            _typeNameTable[70] = "Telerik.UI.Xaml.Controls.Grid.HitTestService";
            _typeNameTable[71] = "Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn";
            _typeNameTable[72] = "Esri.ArcGISRuntime.Controls.MapView";
            _typeNameTable[73] = "Esri.ArcGISRuntime.Controls.ViewBase";
            _typeNameTable[74] = "Esri.ArcGISRuntime.Controls.Map";
            _typeNameTable[75] = "Esri.ArcGISRuntime.Layers.LayerCollection";
            _typeNameTable[76] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>";
            _typeNameTable[77] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>";
            _typeNameTable[78] = "Esri.ArcGISRuntime.Layers.Layer";
            _typeNameTable[79] = "Esri.ArcGISRuntime.Geometry.Envelope";
            _typeNameTable[80] = "Esri.ArcGISRuntime.Geometry.Geometry";
            _typeNameTable[81] = "Esri.ArcGISRuntime.Layers.LayerStatus";
            _typeNameTable[82] = "System.Exception";
            _typeNameTable[83] = "Esri.ArcGISRuntime.Geometry.SpatialReference";
            _typeNameTable[84] = "Esri.ArcGISRuntime.Location.LocationDisplay";
            _typeNameTable[85] = "Esri.ArcGISRuntime.Controls.MapGrid";
            _typeNameTable[86] = "Esri.ArcGISRuntime.Controls.MapGridLevelCollection";
            _typeNameTable[87] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>";
            _typeNameTable[88] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>";
            _typeNameTable[89] = "Esri.ArcGISRuntime.Controls.MapGridLevel";
            _typeNameTable[90] = "Windows.UI.Color";
            _typeNameTable[91] = "Esri.ArcGISRuntime.Data.TimeExtent";
            _typeNameTable[92] = "Esri.ArcGISRuntime.Controls.Editor";
            _typeNameTable[93] = "Windows.UI.Xaml.Controls.UIElementCollection";
            _typeNameTable[94] = "Esri.ArcGISRuntime.Geometry.MapPoint";
            _typeNameTable[95] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[96] = "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer";
            _typeNameTable[97] = "Esri.ArcGISRuntime.Layers.TiledLayer";
            _typeNameTable[98] = "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo";
            _typeNameTable[99] = "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase";
            _typeNameTable[100] = "Esri.ArcGISRuntime.ArcGISServices.ServiceInfo";
            _typeNameTable[101] = "System.Net.Http.HttpMessageHandler";
            _typeNameTable[102] = "Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo";
            _typeNameTable[103] = "Esri.ArcGISRuntime.Layers.LayerInitializationInfo";
            _typeNameTable[104] = "Esri.ArcGISRuntime.Geometry.GeometryType";
            _typeNameTable[105] = "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer";
            _typeNameTable[106] = "Esri.ArcGISRuntime.Layers.DynamicLayer";
            _typeNameTable[107] = "System.Collections.ObjectModel.ObservableCollection`1<Int32>";
            _typeNameTable[108] = "System.Collections.ObjectModel.Collection`1<Int32>";
            _typeNameTable[109] = "Esri.ArcGISRuntime.ArcGISServices.ImageFormat";
            _typeNameTable[110] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerDefinition>";
            _typeNameTable[111] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerDefinition>";
            _typeNameTable[112] = "Esri.ArcGISRuntime.Layers.LayerDefinition";
            _typeNameTable[113] = "Esri.ArcGISRuntime.Layers.LayerTimeOptionCollection";
            _typeNameTable[114] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerTimeOptions>";
            _typeNameTable[115] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerTimeOptions>";
            _typeNameTable[116] = "Esri.ArcGISRuntime.Layers.LayerTimeOptions";
            _typeNameTable[117] = "System.Nullable`1<Double>";
            _typeNameTable[118] = "Esri.ArcGISRuntime.ArcGISServices.TimeUnit";
            _typeNameTable[119] = "Esri.ArcGISRuntime.Layers.LayerDrawingOptionCollection";
            _typeNameTable[120] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerDrawingOptions>";
            _typeNameTable[121] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerDrawingOptions>";
            _typeNameTable[122] = "Esri.ArcGISRuntime.Layers.LayerDrawingOptions";
            _typeNameTable[123] = "Esri.ArcGISRuntime.Symbology.Renderer";
            _typeNameTable[124] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>";
            _typeNameTable[125] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>";
            _typeNameTable[126] = "Esri.ArcGISRuntime.Layers.DynamicLabelingInfo";
            _typeNameTable[127] = "Esri.ArcGISRuntime.ArcGISServices.LabelPlacement";
            _typeNameTable[128] = "Esri.ArcGISRuntime.Symbology.TextSymbol";
            _typeNameTable[129] = "Esri.ArcGISRuntime.Symbology.MarkerSymbol";
            _typeNameTable[130] = "Esri.ArcGISRuntime.Symbology.Symbol";
            _typeNameTable[131] = "Esri.ArcGISRuntime.Layers.DynamicLayerInfoCollection";
            _typeNameTable[132] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.DynamicLayerInfo>";
            _typeNameTable[133] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.DynamicLayerInfo>";
            _typeNameTable[134] = "Esri.ArcGISRuntime.Layers.DynamicLayerInfo";
            _typeNameTable[135] = "System.Collections.Generic.IList`1<Int32>";
            _typeNameTable[136] = "Esri.ArcGISRuntime.Layers.LayerSource";
            _typeNameTable[137] = "Esri.ArcGISRuntime.Layers.GraphicsLayer";
            _typeNameTable[138] = "Esri.ArcGISRuntime.Layers.GraphicCollection";
            _typeNameTable[139] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Graphic>";
            _typeNameTable[140] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Graphic>";
            _typeNameTable[141] = "Esri.ArcGISRuntime.Layers.Graphic";
            _typeNameTable[142] = "Esri.ArcGISRuntime.Data.Feature";
            _typeNameTable[143] = "System.Collections.Generic.IDictionary`2<String, Object>";
            _typeNameTable[144] = "Esri.ArcGISRuntime.Layers.GraphicsRenderingMode";
            _typeNameTable[145] = "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.Layers.Graphic>";
            _typeNameTable[146] = "Esri.ArcGISRuntime.Layers.LabelClassCollection";
            _typeNameTable[147] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LabelClass>";
            _typeNameTable[148] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LabelClass>";
            _typeNameTable[149] = "Esri.ArcGISRuntime.Layers.LabelClass";
            _typeNameTable[150] = "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart";
            _typeNameTable[151] = "Telerik.UI.Xaml.Controls.Chart.RadChartBase";
            _typeNameTable[152] = "Telerik.UI.Xaml.Controls.Chart.PresenterBase";
            _typeNameTable[153] = "Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection";
            _typeNameTable[154] = "Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>";
            _typeNameTable[155] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>";
            _typeNameTable[156] = "Telerik.UI.Xaml.Controls.Chart.CartesianSeries";
            _typeNameTable[157] = "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries";
            _typeNameTable[158] = "Telerik.UI.Xaml.Controls.Chart.ChartSeries";
            _typeNameTable[159] = "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter";
            _typeNameTable[160] = "Telerik.UI.Xaml.Controls.Chart.CartesianAxis";
            _typeNameTable[161] = "Telerik.UI.Xaml.Controls.Chart.LineAxis";
            _typeNameTable[162] = "Telerik.UI.Xaml.Controls.Chart.Axis";
            _typeNameTable[163] = "System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.DataTemplate>";
            _typeNameTable[164] = "System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.DataTemplate>";
            _typeNameTable[165] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>";
            _typeNameTable[166] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>";
            _typeNameTable[167] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition";
            _typeNameTable[168] = "Windows.UI.Xaml.HorizontalAlignment";
            _typeNameTable[169] = "Windows.UI.Xaml.VerticalAlignment";
            _typeNameTable[170] = "Telerik.UI.Xaml.Controls.Chart.DataPointBinding";
            _typeNameTable[171] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[172] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy";
            _typeNameTable[173] = "System.Collections.IEnumerable";
            _typeNameTable[174] = "Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection";
            _typeNameTable[175] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>";
            _typeNameTable[176] = "Telerik.UI.Xaml.Controls.Chart.ChartBehavior";
            _typeNameTable[177] = "Telerik.UI.Xaml.Controls.Chart.IndicatorCollection";
            _typeNameTable[178] = "Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>";
            _typeNameTable[179] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>";
            _typeNameTable[180] = "Telerik.UI.Xaml.Controls.Chart.IndicatorBase";
            _typeNameTable[181] = "Telerik.Charting.DataPointCollection`1<Telerik.Charting.CategoricalDataPoint>";
            _typeNameTable[182] = "Telerik.Core.ElementCollection`1<Telerik.Charting.CategoricalDataPoint>";
            _typeNameTable[183] = "System.Collections.ObjectModel.Collection`1<Telerik.Charting.CategoricalDataPoint>";
            _typeNameTable[184] = "Telerik.Charting.CategoricalDataPoint";
            _typeNameTable[185] = "Telerik.Charting.CategoricalDataPointBase";
            _typeNameTable[186] = "Telerik.Charting.DataPoint";
            _typeNameTable[187] = "Telerik.Core.Node";
            _typeNameTable[188] = "Telerik.Core.PropertyBagObject";
            _typeNameTable[189] = "Telerik.Core.IElementPresenter";
            _typeNameTable[190] = "Telerik.Core.NodeState";
            _typeNameTable[191] = "Telerik.Core.RadRect";
            _typeNameTable[192] = "Telerik.Core.Element";
            _typeNameTable[193] = "Telerik.UI.Xaml.Controls.Chart.CartesianAnnotationCollection";
            _typeNameTable[194] = "Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>";
            _typeNameTable[195] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>";
            _typeNameTable[196] = "Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation";
            _typeNameTable[197] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotation";
            _typeNameTable[198] = "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid";
            _typeNameTable[199] = "Telerik.UI.Xaml.Controls.Chart.ChartGrid";
            _typeNameTable[200] = "Windows.Foundation.Size";
            _typeNameTable[201] = "Windows.Foundation.Point";
            _typeNameTable[202] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider";
            _typeNameTable[203] = "Telerik.UI.Xaml.Controls.Chart.ChartPalette";
            _typeNameTable[204] = "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName";
            _typeNameTable[205] = "Telerik.UI.Xaml.Controls.Chart.LinearAxis";
            _typeNameTable[206] = "Telerik.UI.Xaml.Controls.Chart.NumericalAxis";
            _typeNameTable[207] = "Telerik.Charting.NumericalAxisRangeExtendDirection";
            _typeNameTable[208] = "Telerik.Core.ValueRange`1<Double>";
            _typeNameTable[209] = "Telerik.Charting.AxisHorizontalLocation";
            _typeNameTable[210] = "Telerik.Charting.AxisVerticalLocation";
            _typeNameTable[211] = "Telerik.Charting.IContentFormatter";
            _typeNameTable[212] = "Telerik.Charting.AxisLastLabelVisibility";
            _typeNameTable[213] = "Telerik.Charting.AxisLabelFitMode";
            _typeNameTable[214] = "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis";
            _typeNameTable[215] = "Telerik.Charting.AxisPlotMode";
            _typeNameTable[216] = "Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior";
            _typeNameTable[217] = "Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode";
            _typeNameTable[218] = "System.Collections.Generic.IEnumerable`1<Telerik.Charting.DataPoint>";
            _typeNameTable[219] = "System.Collections.Generic.IEnumerable`1<Telerik.UI.Xaml.Controls.Chart.ChartSeries>";
            _typeNameTable[220] = "Telerik.UI.Xaml.Controls.Chart.BarSeries";
            _typeNameTable[221] = "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries";
            _typeNameTable[222] = "Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase";
            _typeNameTable[223] = "Telerik.UI.Xaml.Controls.Chart.SeriesPaletteMode";
            _typeNameTable[224] = "Telerik.Charting.ChartSeriesCombineMode";
            _typeNameTable[225] = "Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding";
            _typeNameTable[226] = "SAMVoteApp.MainPage";
            _typeNameTable[227] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[228] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[229] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition";
            _typeNameTable[230] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation";
            _typeNameTable[231] = "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection";
            _typeNameTable[232] = "System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>";
            _typeNameTable[233] = "Telerik.UI.Xaml.Controls.Input.HighlightStyle";
            _typeNameTable[234] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[235] = "Telerik.UI.Xaml.Controls.Input.FontWeightName";
            _typeNameTable[236] = "Windows.UI.Text.FontStyle";
            _typeNameTable[237] = "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle";
            _typeNameTable[238] = "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu";
            _typeNameTable[239] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>";
            _typeNameTable[240] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>";
            _typeNameTable[241] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem";
            _typeNameTable[242] = "System.Windows.Input.ICommand";
            _typeNameTable[243] = "Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService";
            _typeNameTable[244] = "Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[245] = "Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[246] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[247] = "Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[248] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[249] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[250] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>";
            _typeNameTable[251] = "Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>";
            _typeNameTable[252] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior";
            _typeNameTable[253] = "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>";
            _typeNameTable[254] = "Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers";

            _typeTable = new global::System.Type[255];
            _typeTable[0] = typeof(global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid);
            _typeTable[1] = typeof(global::Telerik.UI.Xaml.Controls.RadControl);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode);
            _typeTable[5] = typeof(global::System.Enum);
            _typeTable[6] = typeof(global::System.ValueType);
            _typeTable[7] = typeof(global::System.Object);
            _typeTable[8] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnCollection);
            _typeTable[9] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>);
            _typeTable[10] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>);
            _typeTable[11] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn);
            _typeTable[12] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Controls.StyleSelector);
            _typeTable[16] = typeof(global::System.String);
            _typeTable[17] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode);
            _typeTable[18] = typeof(global::System.Double);
            _typeTable[19] = typeof(global::Telerik.UI.Xaml.Controls.Grid.SortDirection);
            _typeTable[20] = typeof(global::Telerik.Data.Core.BatchLoadingMode);
            _typeTable[21] = typeof(global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorCollection);
            _typeTable[22] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>);
            _typeTable[24] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>);
            _typeTable[25] = typeof(global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase);
            _typeTable[26] = typeof(global::Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor);
            _typeTable[27] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptor);
            _typeTable[28] = typeof(global::Telerik.Core.ViewModelBase);
            _typeTable[29] = typeof(global::Telerik.Data.Core.SortOrder);
            _typeTable[30] = typeof(global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorCollection);
            _typeTable[31] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>);
            _typeTable[32] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>);
            _typeTable[33] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>);
            _typeTable[34] = typeof(global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase);
            _typeTable[35] = typeof(global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorCollection);
            _typeTable[36] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>);
            _typeTable[37] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>);
            _typeTable[38] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>);
            _typeTable[39] = typeof(global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase);
            _typeTable[40] = typeof(global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorCollection);
            _typeTable[41] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>);
            _typeTable[42] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>);
            _typeTable[43] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>);
            _typeTable[44] = typeof(global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase);
            _typeTable[45] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridUserEditMode);
            _typeTable[46] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[47] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ObjectSelector<global::Windows.UI.Xaml.Media.Brush>);
            _typeTable[48] = typeof(global::System.Int32);
            _typeTable[49] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility);
            _typeTable[50] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit);
            _typeTable[51] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode);
            _typeTable[52] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>);
            _typeTable[53] = typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>);
            _typeTable[54] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridUserFilterMode);
            _typeTable[55] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode);
            _typeTable[56] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode);
            _typeTable[57] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode);
            _typeTable[58] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[59] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[60] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.CommandCollection<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>);
            _typeTable[61] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>);
            _typeTable[62] = typeof(global::System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>);
            _typeTable[63] = typeof(global::System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>);
            _typeTable[64] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>);
            _typeTable[65] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>);
            _typeTable[66] = typeof(global::Telerik.UI.Xaml.Controls.Grid.Commands.CommandService);
            _typeTable[67] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>);
            _typeTable[68] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ServiceBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>);
            _typeTable[69] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior);
            _typeTable[70] = typeof(global::Telerik.UI.Xaml.Controls.Grid.HitTestService);
            _typeTable[71] = typeof(global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn);
            _typeTable[72] = typeof(global::Esri.ArcGISRuntime.Controls.MapView);
            _typeTable[73] = typeof(global::Esri.ArcGISRuntime.Controls.ViewBase);
            _typeTable[74] = typeof(global::Esri.ArcGISRuntime.Controls.Map);
            _typeTable[75] = typeof(global::Esri.ArcGISRuntime.Layers.LayerCollection);
            _typeTable[76] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Layer>);
            _typeTable[77] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Layer>);
            _typeTable[78] = typeof(global::Esri.ArcGISRuntime.Layers.Layer);
            _typeTable[79] = typeof(global::Esri.ArcGISRuntime.Geometry.Envelope);
            _typeTable[80] = typeof(global::Esri.ArcGISRuntime.Geometry.Geometry);
            _typeTable[81] = typeof(global::Esri.ArcGISRuntime.Layers.LayerStatus);
            _typeTable[82] = typeof(global::System.Exception);
            _typeTable[83] = typeof(global::Esri.ArcGISRuntime.Geometry.SpatialReference);
            _typeTable[84] = typeof(global::Esri.ArcGISRuntime.Location.LocationDisplay);
            _typeTable[85] = typeof(global::Esri.ArcGISRuntime.Controls.MapGrid);
            _typeTable[86] = typeof(global::Esri.ArcGISRuntime.Controls.MapGridLevelCollection);
            _typeTable[87] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>);
            _typeTable[88] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>);
            _typeTable[89] = typeof(global::Esri.ArcGISRuntime.Controls.MapGridLevel);
            _typeTable[90] = typeof(global::Windows.UI.Color);
            _typeTable[91] = typeof(global::Esri.ArcGISRuntime.Data.TimeExtent);
            _typeTable[92] = typeof(global::Esri.ArcGISRuntime.Controls.Editor);
            _typeTable[93] = typeof(global::Windows.UI.Xaml.Controls.UIElementCollection);
            _typeTable[94] = typeof(global::Esri.ArcGISRuntime.Geometry.MapPoint);
            _typeTable[95] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[96] = typeof(global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer);
            _typeTable[97] = typeof(global::Esri.ArcGISRuntime.Layers.TiledLayer);
            _typeTable[98] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo);
            _typeTable[99] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase);
            _typeTable[100] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.ServiceInfo);
            _typeTable[101] = typeof(global::System.Net.Http.HttpMessageHandler);
            _typeTable[102] = typeof(global::Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo);
            _typeTable[103] = typeof(global::Esri.ArcGISRuntime.Layers.LayerInitializationInfo);
            _typeTable[104] = typeof(global::Esri.ArcGISRuntime.Geometry.GeometryType);
            _typeTable[105] = typeof(global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer);
            _typeTable[106] = typeof(global::Esri.ArcGISRuntime.Layers.DynamicLayer);
            _typeTable[107] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Int32>);
            _typeTable[108] = typeof(global::System.Collections.ObjectModel.Collection<global::System.Int32>);
            _typeTable[109] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat);
            _typeTable[110] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LayerDefinition>);
            _typeTable[111] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.LayerDefinition>);
            _typeTable[112] = typeof(global::Esri.ArcGISRuntime.Layers.LayerDefinition);
            _typeTable[113] = typeof(global::Esri.ArcGISRuntime.Layers.LayerTimeOptionCollection);
            _typeTable[114] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LayerTimeOptions>);
            _typeTable[115] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.LayerTimeOptions>);
            _typeTable[116] = typeof(global::Esri.ArcGISRuntime.Layers.LayerTimeOptions);
            _typeTable[117] = typeof(global::System.Nullable<global::System.Double>);
            _typeTable[118] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit);
            _typeTable[119] = typeof(global::Esri.ArcGISRuntime.Layers.LayerDrawingOptionCollection);
            _typeTable[120] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions>);
            _typeTable[121] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions>);
            _typeTable[122] = typeof(global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions);
            _typeTable[123] = typeof(global::Esri.ArcGISRuntime.Symbology.Renderer);
            _typeTable[124] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>);
            _typeTable[125] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>);
            _typeTable[126] = typeof(global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo);
            _typeTable[127] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement);
            _typeTable[128] = typeof(global::Esri.ArcGISRuntime.Symbology.TextSymbol);
            _typeTable[129] = typeof(global::Esri.ArcGISRuntime.Symbology.MarkerSymbol);
            _typeTable[130] = typeof(global::Esri.ArcGISRuntime.Symbology.Symbol);
            _typeTable[131] = typeof(global::Esri.ArcGISRuntime.Layers.DynamicLayerInfoCollection);
            _typeTable[132] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo>);
            _typeTable[133] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo>);
            _typeTable[134] = typeof(global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo);
            _typeTable[135] = typeof(global::System.Collections.Generic.IList<global::System.Int32>);
            _typeTable[136] = typeof(global::Esri.ArcGISRuntime.Layers.LayerSource);
            _typeTable[137] = typeof(global::Esri.ArcGISRuntime.Layers.GraphicsLayer);
            _typeTable[138] = typeof(global::Esri.ArcGISRuntime.Layers.GraphicCollection);
            _typeTable[139] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Graphic>);
            _typeTable[140] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Graphic>);
            _typeTable[141] = typeof(global::Esri.ArcGISRuntime.Layers.Graphic);
            _typeTable[142] = typeof(global::Esri.ArcGISRuntime.Data.Feature);
            _typeTable[143] = typeof(global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>);
            _typeTable[144] = typeof(global::Esri.ArcGISRuntime.Layers.GraphicsRenderingMode);
            _typeTable[145] = typeof(global::System.Collections.Generic.IEnumerable<global::Esri.ArcGISRuntime.Layers.Graphic>);
            _typeTable[146] = typeof(global::Esri.ArcGISRuntime.Layers.LabelClassCollection);
            _typeTable[147] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LabelClass>);
            _typeTable[148] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.LabelClass>);
            _typeTable[149] = typeof(global::Esri.ArcGISRuntime.Layers.LabelClass);
            _typeTable[150] = typeof(global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart);
            _typeTable[151] = typeof(global::Telerik.UI.Xaml.Controls.Chart.RadChartBase);
            _typeTable[152] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterBase);
            _typeTable[153] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection);
            _typeTable[154] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>);
            _typeTable[155] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>);
            _typeTable[156] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries);
            _typeTable[157] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries);
            _typeTable[158] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeries);
            _typeTable[159] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter);
            _typeTable[160] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis);
            _typeTable[161] = typeof(global::Telerik.UI.Xaml.Controls.Chart.LineAxis);
            _typeTable[162] = typeof(global::Telerik.UI.Xaml.Controls.Chart.Axis);
            _typeTable[163] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.DataTemplate>);
            _typeTable[164] = typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.DataTemplate>);
            _typeTable[165] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>);
            _typeTable[166] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>);
            _typeTable[167] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition);
            _typeTable[168] = typeof(global::Windows.UI.Xaml.HorizontalAlignment);
            _typeTable[169] = typeof(global::Windows.UI.Xaml.VerticalAlignment);
            _typeTable[170] = typeof(global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding);
            _typeTable[171] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[172] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy);
            _typeTable[173] = typeof(global::System.Collections.IEnumerable);
            _typeTable[174] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection);
            _typeTable[175] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>);
            _typeTable[176] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior);
            _typeTable[177] = typeof(global::Telerik.UI.Xaml.Controls.Chart.IndicatorCollection);
            _typeTable[178] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>);
            _typeTable[179] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>);
            _typeTable[180] = typeof(global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase);
            _typeTable[181] = typeof(global::Telerik.Charting.DataPointCollection<global::Telerik.Charting.CategoricalDataPoint>);
            _typeTable[182] = typeof(global::Telerik.Core.ElementCollection<global::Telerik.Charting.CategoricalDataPoint>);
            _typeTable[183] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.CategoricalDataPoint>);
            _typeTable[184] = typeof(global::Telerik.Charting.CategoricalDataPoint);
            _typeTable[185] = typeof(global::Telerik.Charting.CategoricalDataPointBase);
            _typeTable[186] = typeof(global::Telerik.Charting.DataPoint);
            _typeTable[187] = typeof(global::Telerik.Core.Node);
            _typeTable[188] = typeof(global::Telerik.Core.PropertyBagObject);
            _typeTable[189] = typeof(global::Telerik.Core.IElementPresenter);
            _typeTable[190] = typeof(global::Telerik.Core.NodeState);
            _typeTable[191] = typeof(global::Telerik.Core.RadRect);
            _typeTable[192] = typeof(global::Telerik.Core.Element);
            _typeTable[193] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianAnnotationCollection);
            _typeTable[194] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>);
            _typeTable[195] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>);
            _typeTable[196] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation);
            _typeTable[197] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotation);
            _typeTable[198] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid);
            _typeTable[199] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartGrid);
            _typeTable[200] = typeof(global::Windows.Foundation.Size);
            _typeTable[201] = typeof(global::Windows.Foundation.Point);
            _typeTable[202] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider);
            _typeTable[203] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartPalette);
            _typeTable[204] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName);
            _typeTable[205] = typeof(global::Telerik.UI.Xaml.Controls.Chart.LinearAxis);
            _typeTable[206] = typeof(global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis);
            _typeTable[207] = typeof(global::Telerik.Charting.NumericalAxisRangeExtendDirection);
            _typeTable[208] = typeof(global::Telerik.Core.ValueRange<global::System.Double>);
            _typeTable[209] = typeof(global::Telerik.Charting.AxisHorizontalLocation);
            _typeTable[210] = typeof(global::Telerik.Charting.AxisVerticalLocation);
            _typeTable[211] = typeof(global::Telerik.Charting.IContentFormatter);
            _typeTable[212] = typeof(global::Telerik.Charting.AxisLastLabelVisibility);
            _typeTable[213] = typeof(global::Telerik.Charting.AxisLabelFitMode);
            _typeTable[214] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis);
            _typeTable[215] = typeof(global::Telerik.Charting.AxisPlotMode);
            _typeTable[216] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior);
            _typeTable[217] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode);
            _typeTable[218] = typeof(global::System.Collections.Generic.IEnumerable<global::Telerik.Charting.DataPoint>);
            _typeTable[219] = typeof(global::System.Collections.Generic.IEnumerable<global::Telerik.UI.Xaml.Controls.Chart.ChartSeries>);
            _typeTable[220] = typeof(global::Telerik.UI.Xaml.Controls.Chart.BarSeries);
            _typeTable[221] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries);
            _typeTable[222] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase);
            _typeTable[223] = typeof(global::Telerik.UI.Xaml.Controls.Chart.SeriesPaletteMode);
            _typeTable[224] = typeof(global::Telerik.Charting.ChartSeriesCombineMode);
            _typeTable[225] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding);
            _typeTable[226] = typeof(global::SAMVoteApp.MainPage);
            _typeTable[227] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[228] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[229] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition);
            _typeTable[230] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation);
            _typeTable[231] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection);
            _typeTable[232] = typeof(global::System.Collections.Generic.List<global::Windows.UI.Xaml.Media.Brush>);
            _typeTable[233] = typeof(global::Telerik.UI.Xaml.Controls.Input.HighlightStyle);
            _typeTable[234] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[235] = typeof(global::Telerik.UI.Xaml.Controls.Input.FontWeightName);
            _typeTable[236] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[237] = typeof(global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle);
            _typeTable[238] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu);
            _typeTable[239] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>);
            _typeTable[240] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>);
            _typeTable[241] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem);
            _typeTable[242] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[243] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService);
            _typeTable[244] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[245] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ServiceBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[246] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[247] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.CommandCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[248] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[249] = typeof(global::System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[250] = typeof(global::System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>);
            _typeTable[251] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>);
            _typeTable[252] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior);
            _typeTable[253] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Windows.UI.Xaml.FrameworkElement>);
            _typeTable[254] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_RadDataGrid() { return new global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid(); }
        private object Activate_9_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>(); }
        private object Activate_10_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>(); }
        private object Activate_23_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>(); }
        private object Activate_24_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>(); }
        private object Activate_32_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>(); }
        private object Activate_33_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>(); }
        private object Activate_37_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>(); }
        private object Activate_38_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>(); }
        private object Activate_42_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>(); }
        private object Activate_43_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>(); }
        private object Activate_47_ObjectSelector() { return new global::Telerik.UI.Xaml.Controls.Primitives.ObjectSelector<global::Windows.UI.Xaml.Media.Brush>(); }
        private object Activate_52_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>(); }
        private object Activate_53_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Object>(); }
        private object Activate_62_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>(); }
        private object Activate_63_Collection() { return new global::System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>(); }
        private object Activate_69_DataGridDragBehavior() { return new global::Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior(); }
        private object Activate_71_DataGridTemplateColumn() { return new global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn(); }
        private object Activate_72_MapView() { return new global::Esri.ArcGISRuntime.Controls.MapView(); }
        private object Activate_74_Map() { return new global::Esri.ArcGISRuntime.Controls.Map(); }
        private object Activate_75_LayerCollection() { return new global::Esri.ArcGISRuntime.Layers.LayerCollection(); }
        private object Activate_76_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Layer>(); }
        private object Activate_77_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Layer>(); }
        private object Activate_79_Envelope() { return new global::Esri.ArcGISRuntime.Geometry.Envelope(); }
        private object Activate_82_Exception() { return new global::System.Exception(); }
        private object Activate_83_SpatialReference() { return new global::Esri.ArcGISRuntime.Geometry.SpatialReference(); }
        private object Activate_84_LocationDisplay() { return new global::Esri.ArcGISRuntime.Location.LocationDisplay(); }
        private object Activate_86_MapGridLevelCollection() { return new global::Esri.ArcGISRuntime.Controls.MapGridLevelCollection(); }
        private object Activate_87_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>(); }
        private object Activate_88_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>(); }
        private object Activate_89_MapGridLevel() { return new global::Esri.ArcGISRuntime.Controls.MapGridLevel(); }
        private object Activate_91_TimeExtent() { return new global::Esri.ArcGISRuntime.Data.TimeExtent(); }
        private object Activate_92_Editor() { return new global::Esri.ArcGISRuntime.Controls.Editor(); }
        private object Activate_94_MapPoint() { return new global::Esri.ArcGISRuntime.Geometry.MapPoint(); }
        private object Activate_96_ArcGISTiledMapServiceLayer() { return new global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer(); }
        private object Activate_105_ArcGISDynamicMapServiceLayer() { return new global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer(); }
        private object Activate_107_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Int32>(); }
        private object Activate_108_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Int32>(); }
        private object Activate_110_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LayerDefinition>(); }
        private object Activate_111_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.LayerDefinition>(); }
        private object Activate_112_LayerDefinition() { return new global::Esri.ArcGISRuntime.Layers.LayerDefinition(); }
        private object Activate_113_LayerTimeOptionCollection() { return new global::Esri.ArcGISRuntime.Layers.LayerTimeOptionCollection(); }
        private object Activate_114_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LayerTimeOptions>(); }
        private object Activate_115_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.LayerTimeOptions>(); }
        private object Activate_116_LayerTimeOptions() { return new global::Esri.ArcGISRuntime.Layers.LayerTimeOptions(); }
        private object Activate_119_LayerDrawingOptionCollection() { return new global::Esri.ArcGISRuntime.Layers.LayerDrawingOptionCollection(); }
        private object Activate_120_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions>(); }
        private object Activate_121_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions>(); }
        private object Activate_122_LayerDrawingOptions() { return new global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions(); }
        private object Activate_124_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>(); }
        private object Activate_125_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>(); }
        private object Activate_126_DynamicLabelingInfo() { return new global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo(); }
        private object Activate_128_TextSymbol() { return new global::Esri.ArcGISRuntime.Symbology.TextSymbol(); }
        private object Activate_131_DynamicLayerInfoCollection() { return new global::Esri.ArcGISRuntime.Layers.DynamicLayerInfoCollection(); }
        private object Activate_132_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo>(); }
        private object Activate_133_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo>(); }
        private object Activate_134_DynamicLayerInfo() { return new global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo(); }
        private object Activate_137_GraphicsLayer() { return new global::Esri.ArcGISRuntime.Layers.GraphicsLayer(); }
        private object Activate_138_GraphicCollection() { return new global::Esri.ArcGISRuntime.Layers.GraphicCollection(); }
        private object Activate_139_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Graphic>(); }
        private object Activate_140_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Graphic>(); }
        private object Activate_141_Graphic() { return new global::Esri.ArcGISRuntime.Layers.Graphic(); }
        private object Activate_146_LabelClassCollection() { return new global::Esri.ArcGISRuntime.Layers.LabelClassCollection(); }
        private object Activate_147_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LabelClass>(); }
        private object Activate_148_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.LabelClass>(); }
        private object Activate_149_LabelClass() { return new global::Esri.ArcGISRuntime.Layers.LabelClass(); }
        private object Activate_150_RadCartesianChart() { return new global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart(); }
        private object Activate_155_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>(); }
        private object Activate_163_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.DataTemplate>(); }
        private object Activate_164_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.DataTemplate>(); }
        private object Activate_165_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>(); }
        private object Activate_166_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>(); }
        private object Activate_167_ChartSeriesLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition(); }
        private object Activate_175_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>(); }
        private object Activate_179_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>(); }
        private object Activate_183_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.CategoricalDataPoint>(); }
        private object Activate_184_CategoricalDataPoint() { return new global::Telerik.Charting.CategoricalDataPoint(); }
        private object Activate_195_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>(); }
        private object Activate_198_CartesianChartGrid() { return new global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid(); }
        private object Activate_202_ChartSeriesProvider() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider(); }
        private object Activate_203_ChartPalette() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartPalette(); }
        private object Activate_205_LinearAxis() { return new global::Telerik.UI.Xaml.Controls.Chart.LinearAxis(); }
        private object Activate_214_CategoricalAxis() { return new global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis(); }
        private object Activate_216_ChartSelectionBehavior() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior(); }
        private object Activate_220_BarSeries() { return new global::Telerik.UI.Xaml.Controls.Chart.BarSeries(); }
        private object Activate_225_PropertyNameDataPointBinding() { return new global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding(); }
        private object Activate_226_MainPage() { return new global::SAMVoteApp.MainPage(); }
        private object Activate_229_ChartAnnotationLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition(); }
        private object Activate_231_PaletteEntryCollection() { return new global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection(); }
        private object Activate_232_List() { return new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Media.Brush>(); }
        private object Activate_233_HighlightStyle() { return new global::Telerik.UI.Xaml.Controls.Input.HighlightStyle(); }
        private object Activate_237_CalendarCellStyle() { return new global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle(); }
        private object Activate_238_RadRadialMenu() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu(); }
        private object Activate_239_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>(); }
        private object Activate_240_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>(); }
        private object Activate_241_RadialMenuItem() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem(); }
        private object Activate_249_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>(); }
        private object Activate_250_Collection() { return new global::System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>(); }
        private object Activate_252_RadialMenuTriggerBehavior() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior(); }
        private void VectorAdd_8_DataGridColumnCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)item;
            collection.Add(newItem);
        }
        private void VectorAdd_9_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)item;
            collection.Add(newItem);
        }
        private void VectorAdd_10_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_SortDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_DataDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_30_GroupDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_31_DataDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_32_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_FilterDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_DataDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_37_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_38_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_40_AggregateDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_41_DataDescriptorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_42_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_43_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_52_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_53_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_60_CommandCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_61_AttachableObjectCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_62_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_63_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_75_LayerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_76_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_77_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_86_MapGridLevelCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_87_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_88_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.MapGridLevel>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_107_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Int32>)instance;
            var newItem = (global::System.Int32)item;
            collection.Add(newItem);
        }
        private void VectorAdd_108_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Int32>)instance;
            var newItem = (global::System.Int32)item;
            collection.Add(newItem);
        }
        private void VectorAdd_110_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LayerDefinition>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LayerDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_111_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LayerDefinition>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LayerDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_113_LayerTimeOptionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LayerTimeOptions>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)item;
            collection.Add(newItem);
        }
        private void VectorAdd_114_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LayerTimeOptions>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)item;
            collection.Add(newItem);
        }
        private void VectorAdd_115_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LayerTimeOptions>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)item;
            collection.Add(newItem);
        }
        private void VectorAdd_119_LayerDrawingOptionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)item;
            collection.Add(newItem);
        }
        private void VectorAdd_120_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)item;
            collection.Add(newItem);
        }
        private void VectorAdd_121_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)item;
            collection.Add(newItem);
        }
        private void VectorAdd_124_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_125_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_131_DynamicLayerInfoCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_132_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_133_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_135_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Int32>)instance;
            var newItem = (global::System.Int32)item;
            collection.Add(newItem);
        }
        private void VectorAdd_138_GraphicCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Graphic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_139_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Graphic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_140_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Graphic)item;
            collection.Add(newItem);
        }
        private void MapAdd_143_IDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_146_LabelClassCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LabelClass>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LabelClass)item;
            collection.Add(newItem);
        }
        private void VectorAdd_147_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LabelClass>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LabelClass)item;
            collection.Add(newItem);
        }
        private void VectorAdd_148_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.LabelClass>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.LabelClass)item;
            collection.Add(newItem);
        }
        private void VectorAdd_153_CartesianSeriesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_154_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_155_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_163_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DataTemplate>)instance;
            var newItem = (global::Windows.UI.Xaml.DataTemplate)item;
            collection.Add(newItem);
        }
        private void VectorAdd_164_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DataTemplate>)instance;
            var newItem = (global::Windows.UI.Xaml.DataTemplate)item;
            collection.Add(newItem);
        }
        private void VectorAdd_165_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_166_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_174_ChartBehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_175_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_177_IndicatorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_178_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_179_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_181_DataPointCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }
        private void VectorAdd_182_ElementCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }
        private void VectorAdd_183_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }
        private void VectorAdd_193_CartesianAnnotationCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation)item;
            collection.Add(newItem);
        }
        private void VectorAdd_194_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation)item;
            collection.Add(newItem);
        }
        private void VectorAdd_195_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation)item;
            collection.Add(newItem);
        }
        private void VectorAdd_232_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Brush>)instance;
            var newItem = (global::Windows.UI.Xaml.Media.Brush)item;
            collection.Add(newItem);
        }
        private void VectorAdd_239_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_240_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_247_CommandCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_248_AttachableObjectCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_249_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_250_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Telerik.UI.Xaml.Controls.Grid.RadDataGrid
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.Activator = Activate_0_RadDataGrid;
                userType.AddMemberName("AutoGenerateColumns");
                userType.AddMemberName("UserGroupMode");
                userType.AddMemberName("Columns");
                userType.AddMemberName("CurrentItem");
                userType.AddMemberName("EnsureCurrentItemIntoView");
                userType.AddMemberName("IsSynchronizedWithCurrentItem");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("IncrementalLoadingMode");
                userType.AddMemberName("SortDescriptors");
                userType.AddMemberName("GroupDescriptors");
                userType.AddMemberName("FilterDescriptors");
                userType.AddMemberName("AggregateDescriptors");
                userType.AddMemberName("UserEditMode");
                userType.AddMemberName("RowBackground");
                userType.AddMemberName("RowBackgroundSelector");
                userType.AddMemberName("AlternateRowBackground");
                userType.AddMemberName("AlternationStep");
                userType.AddMemberName("AlternationStartIndex");
                userType.AddMemberName("GridLinesBrush");
                userType.AddMemberName("GridLinesVisibility");
                userType.AddMemberName("GridLinesThickness");
                userType.AddMemberName("SelectionUnit");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("IsBusyIndicatorEnabled");
                userType.AddMemberName("UserFilterMode");
                userType.AddMemberName("UserColumnReorderMode");
                userType.AddMemberName("UserSortMode");
                userType.AddMemberName("IndentWidth");
                userType.AddMemberName("GroupHeaderDisplayMode");
                userType.AddMemberName("GroupHeaderTemplate");
                userType.AddMemberName("GroupHeaderTemplateSelector");
                userType.AddMemberName("GroupHeaderStyle");
                userType.AddMemberName("GroupHeaderStyleSelector");
                userType.AddMemberName("Commands");
                userType.AddMemberName("RowHeight");
                userType.AddMemberName("CommandService");
                userType.AddMemberName("DragBehavior");
                userType.AddMemberName("HitTestService");
                xamlType = userType;
                break;

            case 1:   //  Telerik.UI.Xaml.Controls.RadControl
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                xamlType = userType;
                break;

            case 2:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode.Auto);
                userType.AddEnumValue("Enabled", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode.Enabled);
                userType.AddEnumValue("Disabled", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode.Disabled);
                xamlType = userType;
                break;

            case 5:   //  System.Enum
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 6:   //  System.ValueType
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 7:   //  Object
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Telerik.UI.Xaml.Controls.Grid.DataGridColumnCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>"));
                userType.CollectionAdd = VectorAdd_8_DataGridColumnCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>"));
                userType.Activator = Activate_9_ObservableCollection;
                userType.CollectionAdd = VectorAdd_9_ObservableCollection;
                xamlType = userType;
                break;

            case 10:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.DataGridColumn>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_Collection;
                userType.CollectionAdd = VectorAdd_10_Collection;
                xamlType = userType;
                break;

            case 11:   //  Telerik.UI.Xaml.Controls.Grid.DataGridColumn
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("CellDecorationStyle");
                userType.AddMemberName("CellDecorationStyleSelector");
                userType.AddMemberName("Name");
                userType.AddMemberName("CanUserEdit");
                userType.AddMemberName("CanUserFilter");
                userType.AddMemberName("CanUserReorder");
                userType.AddMemberName("CanUserGroup");
                userType.AddMemberName("CanUserSort");
                userType.AddMemberName("HeaderStyle");
                userType.AddMemberName("SizeMode");
                userType.AddMemberName("Width");
                userType.AddMemberName("ActualWidth");
                userType.AddMemberName("IsAutoGenerated");
                userType.AddMemberName("Header");
                userType.AddMemberName("SortDirection");
                xamlType = userType;
                break;

            case 12:   //  Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 13:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Windows.UI.Xaml.Style
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Xaml.Controls.StyleSelector
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  String
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Stretch", global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode.Stretch);
                userType.AddEnumValue("Auto", global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode.Auto);
                userType.AddEnumValue("Fixed", global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode.Fixed);
                xamlType = userType;
                break;

            case 18:   //  Double
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Telerik.UI.Xaml.Controls.Grid.SortDirection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.SortDirection.None);
                userType.AddEnumValue("Ascending", global::Telerik.UI.Xaml.Controls.Grid.SortDirection.Ascending);
                userType.AddEnumValue("Descending", global::Telerik.UI.Xaml.Controls.Grid.SortDirection.Descending);
                xamlType = userType;
                break;

            case 20:   //  Telerik.Data.Core.BatchLoadingMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Telerik.Data.Core.BatchLoadingMode.Auto);
                userType.AddEnumValue("Explicit", global::Telerik.Data.Core.BatchLoadingMode.Explicit);
                xamlType = userType;
                break;

            case 21:   //  Telerik.UI.Xaml.Controls.Grid.SortDescriptorCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_21_SortDescriptorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_22_DataDescriptorCollection;
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>"));
                userType.Activator = Activate_23_ObservableCollection;
                userType.CollectionAdd = VectorAdd_23_ObservableCollection;
                xamlType = userType;
                break;

            case 24:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_Collection;
                userType.CollectionAdd = VectorAdd_24_Collection;
                xamlType = userType;
                break;

            case 25:   //  Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor"));
                xamlType = userType;
                break;

            case 26:   //  Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptor"));
                userType.AddMemberName("SortOrder");
                xamlType = userType;
                break;

            case 27:   //  Telerik.UI.Xaml.Controls.Grid.DataDescriptor
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.ViewModelBase"));
                xamlType = userType;
                break;

            case 28:   //  Telerik.Core.ViewModelBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 29:   //  Telerik.Data.Core.SortOrder
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Ascending", global::Telerik.Data.Core.SortOrder.Ascending);
                userType.AddEnumValue("Descending", global::Telerik.Data.Core.SortOrder.Descending);
                xamlType = userType;
                break;

            case 30:   //  Telerik.UI.Xaml.Controls.Grid.GroupDescriptorCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_30_GroupDescriptorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_31_DataDescriptorCollection;
                xamlType = userType;
                break;

            case 32:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>"));
                userType.Activator = Activate_32_ObservableCollection;
                userType.CollectionAdd = VectorAdd_32_ObservableCollection;
                xamlType = userType;
                break;

            case 33:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_Collection;
                userType.CollectionAdd = VectorAdd_33_Collection;
                xamlType = userType;
                break;

            case 34:   //  Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor"));
                userType.AddMemberName("DisplayContent");
                xamlType = userType;
                break;

            case 35:   //  Telerik.UI.Xaml.Controls.Grid.FilterDescriptorCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_35_FilterDescriptorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_36_DataDescriptorCollection;
                xamlType = userType;
                break;

            case 37:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>"));
                userType.Activator = Activate_37_ObservableCollection;
                userType.CollectionAdd = VectorAdd_37_ObservableCollection;
                xamlType = userType;
                break;

            case 38:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_38_Collection;
                userType.CollectionAdd = VectorAdd_38_Collection;
                xamlType = userType;
                break;

            case 39:   //  Telerik.UI.Xaml.Controls.Grid.FilterDescriptorBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptor"));
                xamlType = userType;
                break;

            case 40:   //  Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_40_AggregateDescriptorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  Telerik.UI.Xaml.Controls.Grid.DataDescriptorCollection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>"));
                userType.CollectionAdd = VectorAdd_41_DataDescriptorCollection;
                xamlType = userType;
                break;

            case 42:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>"));
                userType.Activator = Activate_42_ObservableCollection;
                userType.CollectionAdd = VectorAdd_42_ObservableCollection;
                xamlType = userType;
                break;

            case 43:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_43_Collection;
                userType.CollectionAdd = VectorAdd_43_Collection;
                xamlType = userType;
                break;

            case 44:   //  Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataDescriptor"));
                xamlType = userType;
                break;

            case 45:   //  Telerik.UI.Xaml.Controls.Grid.DataGridUserEditMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserEditMode.None);
                userType.AddEnumValue("Inline", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserEditMode.Inline);
                xamlType = userType;
                break;

            case 46:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Telerik.UI.Xaml.Controls.Primitives.ObjectSelector`1<Windows.UI.Xaml.Media.Brush>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  Int32
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility.None);
                userType.AddEnumValue("Horizontal", global::Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility.Horizontal);
                userType.AddEnumValue("Vertical", global::Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility.Vertical);
                userType.AddEnumValue("Both", global::Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility.Both);
                xamlType = userType;
                break;

            case 50:   //  Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Row", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit.Row);
                userType.AddEnumValue("Cell", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit.Cell);
                xamlType = userType;
                break;

            case 51:   //  Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode.None);
                userType.AddEnumValue("Single", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode.Single);
                userType.AddEnumValue("Multiple", global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode.Multiple);
                xamlType = userType;
                break;

            case 52:   //  System.Collections.ObjectModel.ObservableCollection`1<Object>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Object>"));
                userType.CollectionAdd = VectorAdd_52_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  System.Collections.ObjectModel.Collection`1<Object>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_53_Collection;
                userType.CollectionAdd = VectorAdd_53_Collection;
                xamlType = userType;
                break;

            case 54:   //  Telerik.UI.Xaml.Controls.Grid.DataGridUserFilterMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserFilterMode.Auto);
                userType.AddEnumValue("Enabled", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserFilterMode.Enabled);
                userType.AddEnumValue("Disabled", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserFilterMode.Disabled);
                xamlType = userType;
                break;

            case 55:   //  Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Interactive", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode.Interactive);
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode.None);
                xamlType = userType;
                break;

            case 56:   //  Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode.Auto);
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode.None);
                userType.AddEnumValue("Single", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode.Single);
                userType.AddEnumValue("Multiple", global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode.Multiple);
                xamlType = userType;
                break;

            case 57:   //  Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Frozen", global::Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode.Frozen);
                userType.AddEnumValue("Scrollable", global::Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode.Scrollable);
                xamlType = userType;
                break;

            case 58:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 60:   //  Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Grid.RadDataGrid, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>"));
                userType.CollectionAdd = VectorAdd_60_CommandCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Grid.RadDataGrid, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>"));
                userType.CollectionAdd = VectorAdd_61_AttachableObjectCollection;
                xamlType = userType;
                break;

            case 62:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>"));
                userType.Activator = Activate_62_ObservableCollection;
                userType.CollectionAdd = VectorAdd_62_ObservableCollection;
                xamlType = userType;
                break;

            case 63:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_63_Collection;
                userType.CollectionAdd = VectorAdd_63_Collection;
                xamlType = userType;
                break;

            case 64:   //  Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                xamlType = userType;
                break;

            case 65:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("Owner");
                xamlType = userType;
                break;

            case 66:   //  Telerik.UI.Xaml.Controls.Grid.Commands.CommandService
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 67:   //  Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                xamlType = userType;
                break;

            case 68:   //  Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                xamlType = userType;
                break;

            case 69:   //  Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 70:   //  Telerik.UI.Xaml.Controls.Grid.HitTestService
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 71:   //  Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn"));
                userType.Activator = Activate_71_DataGridTemplateColumn;
                userType.AddMemberName("CellContentTemplate");
                userType.AddMemberName("CellContentTemplateSelector");
                userType.AddMemberName("SortDescriptor");
                userType.AddMemberName("GroupDescriptor");
                xamlType = userType;
                break;

            case 72:   //  Esri.ArcGISRuntime.Controls.MapView
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase"));
                userType.Activator = Activate_72_MapView;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.MapView.Map");
                userType.AddMemberName("Map");
                userType.AddMemberName("IsNavigating");
                userType.AddMemberName("LocationDisplay");
                userType.AddMemberName("MapGrid");
                userType.AddMemberName("Extent");
                userType.AddMemberName("SpatialReference");
                userType.AddMemberName("Scale");
                userType.AddMemberName("UnitsPerPixel");
                userType.AddMemberName("MaximumExtent");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("WrapAround");
                userType.AddMemberName("TimeExtent");
                userType.AddMemberName("Rotation");
                userType.AddMemberName("Editor");
                userType.AddMemberName("ShowMagnifierOnTapAndHold");
                userType.AddMemberName("Overlays");
                userType.AddMemberName("MapOverlayAnchor");
                xamlType = userType;
                break;

            case 73:   //  Esri.ArcGISRuntime.Controls.ViewBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                xamlType = userType;
                break;

            case 74:   //  Esri.ArcGISRuntime.Controls.Map
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_74_Map;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.Map.Layers");
                userType.AddMemberName("Layers");
                userType.AddMemberName("InitialExtent");
                xamlType = userType;
                break;

            case 75:   //  Esri.ArcGISRuntime.Layers.LayerCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>"));
                userType.CollectionAdd = VectorAdd_75_LayerCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 76:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>"));
                userType.Activator = Activate_76_ObservableCollection;
                userType.CollectionAdd = VectorAdd_76_ObservableCollection;
                xamlType = userType;
                break;

            case 77:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_77_Collection;
                userType.CollectionAdd = VectorAdd_77_Collection;
                xamlType = userType;
                break;

            case 78:   //  Esri.ArcGISRuntime.Layers.Layer
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("FullExtent");
                userType.AddMemberName("Status");
                userType.AddMemberName("InitializationException");
                userType.AddMemberName("DefaultSpatialReference");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("DisplayName");
                userType.AddMemberName("ShowLegend");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("ID");
                xamlType = userType;
                break;

            case 79:   //  Esri.ArcGISRuntime.Geometry.Envelope
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.Activator = Activate_79_Envelope;
                userType.AddMemberName("XMin");
                userType.AddMemberName("YMin");
                userType.AddMemberName("XMax");
                userType.AddMemberName("YMax");
                userType.AddMemberName("GeometryType");
                userType.AddMemberName("ZMin");
                userType.AddMemberName("ZMax");
                userType.AddMemberName("MMin");
                userType.AddMemberName("MMax");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Extent");
                userType.AddMemberName("HasM");
                userType.AddMemberName("HasZ");
                userType.AddMemberName("IsEmpty");
                xamlType = userType;
                break;

            case 80:   //  Esri.ArcGISRuntime.Geometry.Geometry
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Dimension");
                userType.AddMemberName("SpatialReference");
                xamlType = userType;
                break;

            case 81:   //  Esri.ArcGISRuntime.Layers.LayerStatus
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("NotInitialized", global::Esri.ArcGISRuntime.Layers.LayerStatus.NotInitialized);
                userType.AddEnumValue("Initializing", global::Esri.ArcGISRuntime.Layers.LayerStatus.Initializing);
                userType.AddEnumValue("Initialized", global::Esri.ArcGISRuntime.Layers.LayerStatus.Initialized);
                userType.AddEnumValue("Failed", global::Esri.ArcGISRuntime.Layers.LayerStatus.Failed);
                xamlType = userType;
                break;

            case 82:   //  System.Exception
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 83:   //  Esri.ArcGISRuntime.Geometry.SpatialReference
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 84:   //  Esri.ArcGISRuntime.Location.LocationDisplay
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 85:   //  Esri.ArcGISRuntime.Controls.MapGrid
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.MapGrid.Levels");
                userType.AddMemberName("Levels");
                xamlType = userType;
                break;

            case 86:   //  Esri.ArcGISRuntime.Controls.MapGridLevelCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>"));
                userType.CollectionAdd = VectorAdd_86_MapGridLevelCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 87:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>"));
                userType.Activator = Activate_87_ObservableCollection;
                userType.CollectionAdd = VectorAdd_87_ObservableCollection;
                xamlType = userType;
                break;

            case 88:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.MapGridLevel>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_88_Collection;
                userType.CollectionAdd = VectorAdd_88_Collection;
                xamlType = userType;
                break;

            case 89:   //  Esri.ArcGISRuntime.Controls.MapGridLevel
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_89_MapGridLevel;
                userType.AddMemberName("LineColor");
                userType.AddMemberName("LineWidth");
                userType.AddMemberName("LabelColor");
                userType.AddMemberName("AreLabelsVisible");
                userType.AddMemberName("AreLinesVisible");
                xamlType = userType;
                break;

            case 90:   //  Windows.UI.Color
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 91:   //  Esri.ArcGISRuntime.Data.TimeExtent
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 92:   //  Esri.ArcGISRuntime.Controls.Editor
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 93:   //  Windows.UI.Xaml.Controls.UIElementCollection
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 94:   //  Esri.ArcGISRuntime.Geometry.MapPoint
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 95:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 96:   //  Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer"));
                userType.Activator = Activate_96_ArcGISTiledMapServiceLayer;
                userType.AddMemberName("ServiceUri");
                userType.AddMemberName("Token");
                userType.AddMemberName("ServiceInfo");
                userType.AddMemberName("HttpMessageHandler");
                xamlType = userType;
                break;

            case 97:   //  Esri.ArcGISRuntime.Layers.TiledLayer
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer"));
                userType.AddMemberName("TileInfo");
                userType.AddMemberName("Brightness");
                userType.AddMemberName("Contrast");
                userType.AddMemberName("Gamma");
                xamlType = userType;
                break;

            case 98:   //  Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 99:   //  Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.ArcGISServices.ServiceInfo"));
                xamlType = userType;
                break;

            case 100:   //  Esri.ArcGISRuntime.ArcGISServices.ServiceInfo
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 101:   //  System.Net.Http.HttpMessageHandler
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 102:   //  Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerInitializationInfo"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 103:   //  Esri.ArcGISRuntime.Layers.LayerInitializationInfo
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 104:   //  Esri.ArcGISRuntime.Geometry.GeometryType
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unknown", global::Esri.ArcGISRuntime.Geometry.GeometryType.Unknown);
                userType.AddEnumValue("Point", global::Esri.ArcGISRuntime.Geometry.GeometryType.Point);
                userType.AddEnumValue("MultiPoint", global::Esri.ArcGISRuntime.Geometry.GeometryType.MultiPoint);
                userType.AddEnumValue("Polyline", global::Esri.ArcGISRuntime.Geometry.GeometryType.Polyline);
                userType.AddEnumValue("Polygon", global::Esri.ArcGISRuntime.Geometry.GeometryType.Polygon);
                userType.AddEnumValue("Envelope", global::Esri.ArcGISRuntime.Geometry.GeometryType.Envelope);
                xamlType = userType;
                break;

            case 105:   //  Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayer"));
                userType.Activator = Activate_105_ArcGISDynamicMapServiceLayer;
                userType.AddMemberName("ServiceUri");
                userType.AddMemberName("ServiceInfo");
                userType.AddMemberName("VisibleLayers");
                userType.AddMemberName("Token");
                userType.AddMemberName("HttpMessageHandler");
                userType.AddMemberName("ImageFormat");
                userType.AddMemberName("LayerDefinitions");
                userType.AddMemberName("LayerTimeOptions");
                userType.AddMemberName("LayerDrawingOptions");
                userType.AddMemberName("DynamicLayerInfos");
                userType.AddMemberName("GeodatabaseVersion");
                xamlType = userType;
                break;

            case 106:   //  Esri.ArcGISRuntime.Layers.DynamicLayer
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer"));
                userType.AddMemberName("Brightness");
                userType.AddMemberName("Contrast");
                userType.AddMemberName("Gamma");
                xamlType = userType;
                break;

            case 107:   //  System.Collections.ObjectModel.ObservableCollection`1<Int32>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Int32>"));
                userType.CollectionAdd = VectorAdd_107_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 108:   //  System.Collections.ObjectModel.Collection`1<Int32>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_108_Collection;
                userType.CollectionAdd = VectorAdd_108_Collection;
                xamlType = userType;
                break;

            case 109:   //  Esri.ArcGISRuntime.ArcGISServices.ImageFormat
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat.Default);
                userType.AddEnumValue("JPGPNG", global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat.JPGPNG);
                userType.AddEnumValue("PNG", global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat.PNG);
                userType.AddEnumValue("PNG8", global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat.PNG8);
                userType.AddEnumValue("PNG24", global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat.PNG24);
                userType.AddEnumValue("JPG", global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat.JPG);
                userType.AddEnumValue("PNG32", global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat.PNG32);
                xamlType = userType;
                break;

            case 110:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerDefinition>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerDefinition>"));
                userType.CollectionAdd = VectorAdd_110_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 111:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerDefinition>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_111_Collection;
                userType.CollectionAdd = VectorAdd_111_Collection;
                xamlType = userType;
                break;

            case 112:   //  Esri.ArcGISRuntime.Layers.LayerDefinition
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_112_LayerDefinition;
                userType.AddMemberName("LayerID");
                userType.AddMemberName("Definition");
                xamlType = userType;
                break;

            case 113:   //  Esri.ArcGISRuntime.Layers.LayerTimeOptionCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerTimeOptions>"));
                userType.CollectionAdd = VectorAdd_113_LayerTimeOptionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 114:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerTimeOptions>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerTimeOptions>"));
                userType.Activator = Activate_114_ObservableCollection;
                userType.CollectionAdd = VectorAdd_114_ObservableCollection;
                xamlType = userType;
                break;

            case 115:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerTimeOptions>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_115_Collection;
                userType.CollectionAdd = VectorAdd_115_Collection;
                xamlType = userType;
                break;

            case 116:   //  Esri.ArcGISRuntime.Layers.LayerTimeOptions
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_116_LayerTimeOptions;
                userType.AddMemberName("LayerID");
                userType.AddMemberName("UseTime");
                userType.AddMemberName("TimeCumulative");
                userType.AddMemberName("TimeOffset");
                userType.AddMemberName("TimeOffsetUnits");
                xamlType = userType;
                break;

            case 117:   //  System.Nullable`1<Double>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 118:   //  Esri.ArcGISRuntime.ArcGISServices.TimeUnit
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unknown", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Unknown);
                userType.AddEnumValue("Milliseconds", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Milliseconds);
                userType.AddEnumValue("Seconds", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Seconds);
                userType.AddEnumValue("Minutes", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Minutes);
                userType.AddEnumValue("Hours", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Hours);
                userType.AddEnumValue("Days", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Days);
                userType.AddEnumValue("Weeks", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Weeks);
                userType.AddEnumValue("Months", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Months);
                userType.AddEnumValue("Years", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Years);
                userType.AddEnumValue("Decades", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Decades);
                userType.AddEnumValue("Centuries", global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Centuries);
                xamlType = userType;
                break;

            case 119:   //  Esri.ArcGISRuntime.Layers.LayerDrawingOptionCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerDrawingOptions>"));
                userType.CollectionAdd = VectorAdd_119_LayerDrawingOptionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 120:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerDrawingOptions>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerDrawingOptions>"));
                userType.Activator = Activate_120_ObservableCollection;
                userType.CollectionAdd = VectorAdd_120_ObservableCollection;
                xamlType = userType;
                break;

            case 121:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LayerDrawingOptions>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_121_Collection;
                userType.CollectionAdd = VectorAdd_121_Collection;
                xamlType = userType;
                break;

            case 122:   //  Esri.ArcGISRuntime.Layers.LayerDrawingOptions
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_122_LayerDrawingOptions;
                userType.AddMemberName("LayerID");
                userType.AddMemberName("Renderer");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("ScaleSymbols");
                userType.AddMemberName("ShowLabels");
                userType.AddMemberName("LabelingInfos");
                xamlType = userType;
                break;

            case 123:   //  Esri.ArcGISRuntime.Symbology.Renderer
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 124:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>"));
                userType.CollectionAdd = VectorAdd_124_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 125:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_125_Collection;
                userType.CollectionAdd = VectorAdd_125_Collection;
                xamlType = userType;
                break;

            case 126:   //  Esri.ArcGISRuntime.Layers.DynamicLabelingInfo
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_126_DynamicLabelingInfo;
                userType.AddMemberName("LabelPlacement");
                userType.AddMemberName("LabelExpression");
                userType.AddMemberName("UseCodedValues");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("Where");
                userType.AddMemberName("Symbol");
                xamlType = userType;
                break;

            case 127:   //  Esri.ArcGISRuntime.ArcGISServices.LabelPlacement
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("PointLabelPlacementAboveCenter", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementAboveCenter);
                userType.AddEnumValue("PointLabelPlacementAboveLeft", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementAboveLeft);
                userType.AddEnumValue("PointLabelPlacementAboveRight", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementAboveRight);
                userType.AddEnumValue("PointLabelPlacementBelowCenter", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementBelowCenter);
                userType.AddEnumValue("PointLabelPlacementBelowLeft", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementBelowLeft);
                userType.AddEnumValue("PointLabelPlacementBelowRight", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementBelowRight);
                userType.AddEnumValue("PointLabelPlacementCenterCenter", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementCenterCenter);
                userType.AddEnumValue("PointLabelPlacementCenterLeft", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementCenterLeft);
                userType.AddEnumValue("PointLabelPlacementCenterRight", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PointLabelPlacementCenterRight);
                userType.AddEnumValue("LinePlacementAboveAfter", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementAboveAfter);
                userType.AddEnumValue("LinePlacementAboveAlong", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementAboveAlong);
                userType.AddEnumValue("LinePlacementAboveBefore", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementAboveBefore);
                userType.AddEnumValue("LinePlacementAboveStart", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementAboveStart);
                userType.AddEnumValue("LinePlacementAboveEnd", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementAboveEnd);
                userType.AddEnumValue("LinePlacementBelowAfter", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementBelowAfter);
                userType.AddEnumValue("LinePlacementBelowAlong", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementBelowAlong);
                userType.AddEnumValue("LinePlacementBelowBefore", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementBelowBefore);
                userType.AddEnumValue("LinePlacementBelowStart", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementBelowStart);
                userType.AddEnumValue("LinePlacementBelowEnd", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementBelowEnd);
                userType.AddEnumValue("LinePlacementCenterAfter", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementCenterAfter);
                userType.AddEnumValue("LinePlacementCenterAlong", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementCenterAlong);
                userType.AddEnumValue("LinePlacementCenterBefore", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementCenterBefore);
                userType.AddEnumValue("LinePlacementCenterStart", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementCenterStart);
                userType.AddEnumValue("LinePlacementCenterEnd", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.LinePlacementCenterEnd);
                userType.AddEnumValue("PolygonPlacementAlwaysHorizontal", global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement.PolygonPlacementAlwaysHorizontal);
                xamlType = userType;
                break;

            case 128:   //  Esri.ArcGISRuntime.Symbology.TextSymbol
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 129:   //  Esri.ArcGISRuntime.Symbology.MarkerSymbol
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                xamlType = userType;
                break;

            case 130:   //  Esri.ArcGISRuntime.Symbology.Symbol
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 131:   //  Esri.ArcGISRuntime.Layers.DynamicLayerInfoCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.DynamicLayerInfo>"));
                userType.CollectionAdd = VectorAdd_131_DynamicLayerInfoCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 132:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.DynamicLayerInfo>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.DynamicLayerInfo>"));
                userType.Activator = Activate_132_ObservableCollection;
                userType.CollectionAdd = VectorAdd_132_ObservableCollection;
                xamlType = userType;
                break;

            case 133:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.DynamicLayerInfo>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_133_Collection;
                userType.CollectionAdd = VectorAdd_133_Collection;
                xamlType = userType;
                break;

            case 134:   //  Esri.ArcGISRuntime.Layers.DynamicLayerInfo
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_134_DynamicLayerInfo;
                userType.AddMemberName("ID");
                userType.AddMemberName("Name");
                userType.AddMemberName("DefaultVisibility");
                userType.AddMemberName("SubLayerIds");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("Source");
                xamlType = userType;
                break;

            case 135:   //  System.Collections.Generic.IList`1<Int32>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_135_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 136:   //  Esri.ArcGISRuntime.Layers.LayerSource
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 137:   //  Esri.ArcGISRuntime.Layers.GraphicsLayer
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer"));
                userType.Activator = Activate_137_GraphicsLayer;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Layers.GraphicsLayer.Graphics");
                userType.AddMemberName("Graphics");
                userType.AddMemberName("RenderingMode");
                userType.AddMemberName("SelectionColor");
                userType.AddMemberName("Renderer");
                userType.AddMemberName("GraphicsSource");
                userType.AddMemberName("IsLabelingEnabled");
                userType.AddMemberName("LabelClasses");
                userType.AddMemberName("SelectedItems");
                xamlType = userType;
                break;

            case 138:   //  Esri.ArcGISRuntime.Layers.GraphicCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Graphic>"));
                userType.CollectionAdd = VectorAdd_138_GraphicCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 139:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Graphic>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Graphic>"));
                userType.Activator = Activate_139_ObservableCollection;
                userType.CollectionAdd = VectorAdd_139_ObservableCollection;
                xamlType = userType;
                break;

            case 140:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Graphic>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_140_Collection;
                userType.CollectionAdd = VectorAdd_140_Collection;
                xamlType = userType;
                break;

            case 141:   //  Esri.ArcGISRuntime.Layers.Graphic
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Data.Feature"));
                userType.Activator = Activate_141_Graphic;
                userType.AddMemberName("Symbol");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("ZIndex");
                xamlType = userType;
                break;

            case 142:   //  Esri.ArcGISRuntime.Data.Feature
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Attributes");
                userType.AddMemberName("Geometry");
                xamlType = userType;
                break;

            case 143:   //  System.Collections.Generic.IDictionary`2<String, Object>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.DictionaryAdd = MapAdd_143_IDictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 144:   //  Esri.ArcGISRuntime.Layers.GraphicsRenderingMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Dynamic", global::Esri.ArcGISRuntime.Layers.GraphicsRenderingMode.Dynamic);
                userType.AddEnumValue("Static", global::Esri.ArcGISRuntime.Layers.GraphicsRenderingMode.Static);
                xamlType = userType;
                break;

            case 145:   //  System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.Layers.Graphic>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 146:   //  Esri.ArcGISRuntime.Layers.LabelClassCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LabelClass>"));
                userType.CollectionAdd = VectorAdd_146_LabelClassCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 147:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LabelClass>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LabelClass>"));
                userType.Activator = Activate_147_ObservableCollection;
                userType.CollectionAdd = VectorAdd_147_ObservableCollection;
                xamlType = userType;
                break;

            case 148:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.LabelClass>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_148_Collection;
                userType.CollectionAdd = VectorAdd_148_Collection;
                xamlType = userType;
                break;

            case 149:   //  Esri.ArcGISRuntime.Layers.LabelClass
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_149_LabelClass;
                userType.AddMemberName("TextExpression");
                userType.AddMemberName("Symbol");
                xamlType = userType;
                break;

            case 150:   //  Telerik.UI.Xaml.Controls.Chart.RadCartesianChart
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase"));
                userType.Activator = Activate_150_RadCartesianChart;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Series");
                userType.AddMemberName("Series");
                userType.AddMemberName("HorizontalAxis");
                userType.AddMemberName("VerticalAxis");
                userType.AddMemberName("Indicators");
                userType.AddMemberName("Annotations");
                userType.AddMemberName("Grid");
                xamlType = userType;
                break;

            case 151:   //  Telerik.UI.Xaml.Controls.Chart.RadChartBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase"));
                userType.AddMemberName("Behaviors");
                userType.AddMemberName("Zoom");
                userType.AddMemberName("MaxZoom");
                userType.AddMemberName("MinZoom");
                userType.AddMemberName("PlotOrigin");
                userType.AddMemberName("PlotAreaClip");
                userType.AddMemberName("ScrollOffset");
                userType.AddMemberName("SeriesProvider");
                userType.AddMemberName("ClipToBounds");
                userType.AddMemberName("EmptyContent");
                userType.AddMemberName("EmptyContentTemplate");
                userType.AddMemberName("PlotAreaStyle");
                userType.AddMemberName("Palette");
                userType.AddMemberName("PaletteName");
                userType.AddMemberName("SelectionPalette");
                userType.AddMemberName("SelectionPaletteName");
                xamlType = userType;
                break;

            case 152:   //  Telerik.UI.Xaml.Controls.Chart.PresenterBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                xamlType = userType;
                break;

            case 153:   //  Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>"));
                userType.CollectionAdd = VectorAdd_153_CartesianSeriesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 154:   //  Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>"));
                userType.CollectionAdd = VectorAdd_154_PresenterCollection;
                xamlType = userType;
                break;

            case 155:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_155_Collection;
                userType.CollectionAdd = VectorAdd_155_Collection;
                xamlType = userType;
                break;

            case 156:   //  Telerik.UI.Xaml.Controls.Chart.CartesianSeries
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries"));
                userType.AddMemberName("HorizontalAxis");
                userType.AddMemberName("VerticalAxis");
                xamlType = userType;
                break;

            case 157:   //  Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries"));
                userType.AddMemberName("LegendTitle");
                userType.AddMemberName("IsVisibleInLegend");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("PointTemplate");
                userType.AddMemberName("PointTemplateSelector");
                userType.AddMemberName("PointTemplates");
                xamlType = userType;
                break;

            case 158:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeries
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("AllowSelect");
                userType.AddMemberName("PaletteIndex");
                userType.AddMemberName("LabelDefinitions");
                userType.AddMemberName("IsSelectedBinding");
                userType.AddMemberName("ShowLabels");
                userType.AddMemberName("DisplayName");
                userType.AddMemberName("ClipToPlotArea");
                userType.AddMemberName("ItemsSource");
                xamlType = userType;
                break;

            case 159:   //  Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase"));
                userType.AddMemberName("ZIndex");
                userType.AddMemberName("Chart");
                xamlType = userType;
                break;

            case 160:   //  Telerik.UI.Xaml.Controls.Chart.CartesianAxis
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.LineAxis"));
                userType.AddMemberName("HorizontalLocation");
                userType.AddMemberName("VerticalLocation");
                xamlType = userType;
                break;

            case 161:   //  Telerik.UI.Xaml.Controls.Chart.LineAxis
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis"));
                xamlType = userType;
                break;

            case 162:   //  Telerik.UI.Xaml.Controls.Chart.Axis
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("LabelFormatter");
                userType.AddMemberName("LabelRotationAngle");
                userType.AddMemberName("LineStyle");
                userType.AddMemberName("LastLabelVisibility");
                userType.AddMemberName("LabelFormat");
                userType.AddMemberName("MajorTickOffset");
                userType.AddMemberName("LabelOffset");
                userType.AddMemberName("ShowLabels");
                userType.AddMemberName("LabelFitMode");
                userType.AddMemberName("Title");
                userType.AddMemberName("LabelTemplate");
                userType.AddMemberName("LabelTemplateSelector");
                userType.AddMemberName("LabelStyle");
                userType.AddMemberName("TitleTemplate");
                userType.AddMemberName("MajorTickTemplate");
                userType.AddMemberName("MajorTickStyle");
                userType.AddMemberName("TickThickness");
                userType.AddMemberName("LabelInterval");
                xamlType = userType;
                break;

            case 163:   //  System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.DataTemplate>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.DataTemplate>"));
                userType.CollectionAdd = VectorAdd_163_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 164:   //  System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.DataTemplate>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_164_Collection;
                userType.CollectionAdd = VectorAdd_164_Collection;
                xamlType = userType;
                break;

            case 165:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>"));
                userType.CollectionAdd = VectorAdd_165_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 166:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_166_Collection;
                userType.CollectionAdd = VectorAdd_166_Collection;
                xamlType = userType;
                break;

            case 167:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_167_ChartSeriesLabelDefinition;
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("Template");
                userType.AddMemberName("Binding");
                userType.AddMemberName("Format");
                userType.AddMemberName("Margin");
                userType.AddMemberName("TemplateSelector");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Strategy");
                xamlType = userType;
                break;

            case 168:   //  Windows.UI.Xaml.HorizontalAlignment
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 169:   //  Windows.UI.Xaml.VerticalAlignment
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 170:   //  Telerik.UI.Xaml.Controls.Chart.DataPointBinding
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 171:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 172:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 173:   //  System.Collections.IEnumerable
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 174:   //  Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>"));
                userType.CollectionAdd = VectorAdd_174_ChartBehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 175:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_175_Collection;
                userType.CollectionAdd = VectorAdd_175_Collection;
                xamlType = userType;
                break;

            case 176:   //  Telerik.UI.Xaml.Controls.Chart.ChartBehavior
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Chart");
                xamlType = userType;
                break;

            case 177:   //  Telerik.UI.Xaml.Controls.Chart.IndicatorCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>"));
                userType.CollectionAdd = VectorAdd_177_IndicatorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 178:   //  Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>"));
                userType.CollectionAdd = VectorAdd_178_PresenterCollection;
                xamlType = userType;
                break;

            case 179:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_179_Collection;
                userType.CollectionAdd = VectorAdd_179_Collection;
                xamlType = userType;
                break;

            case 180:   //  Telerik.UI.Xaml.Controls.Chart.IndicatorBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries"));
                userType.AddMemberName("DataPoints");
                userType.AddMemberName("CategoryBinding");
                xamlType = userType;
                break;

            case 181:   //  Telerik.Charting.DataPointCollection`1<Telerik.Charting.CategoricalDataPoint>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.ElementCollection`1<Telerik.Charting.CategoricalDataPoint>"));
                userType.CollectionAdd = VectorAdd_181_DataPointCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 182:   //  Telerik.Core.ElementCollection`1<Telerik.Charting.CategoricalDataPoint>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.Charting.CategoricalDataPoint>"));
                userType.CollectionAdd = VectorAdd_182_ElementCollection;
                xamlType = userType;
                break;

            case 183:   //  System.Collections.ObjectModel.Collection`1<Telerik.Charting.CategoricalDataPoint>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_183_Collection;
                userType.CollectionAdd = VectorAdd_183_Collection;
                xamlType = userType;
                break;

            case 184:   //  Telerik.Charting.CategoricalDataPoint
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Charting.CategoricalDataPointBase"));
                userType.Activator = Activate_184_CategoricalDataPoint;
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 185:   //  Telerik.Charting.CategoricalDataPointBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Charting.DataPoint"));
                userType.AddMemberName("Category");
                xamlType = userType;
                break;

            case 186:   //  Telerik.Charting.DataPoint
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.Node"));
                userType.AddMemberName("Label");
                userType.AddMemberName("DataItem");
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 187:   //  Telerik.Core.Node
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.PropertyBagObject"));
                userType.AddMemberName("Presenter");
                userType.AddMemberName("IsArrangeValid");
                userType.AddMemberName("NodeState");
                userType.AddMemberName("Index");
                userType.AddMemberName("CollectionIndex");
                userType.AddMemberName("IsTreeLoaded");
                userType.AddMemberName("LayoutSlot");
                userType.AddMemberName("Parent");
                xamlType = userType;
                break;

            case 188:   //  Telerik.Core.PropertyBagObject
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 189:   //  Telerik.Core.IElementPresenter
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 190:   //  Telerik.Core.NodeState
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Initial", global::Telerik.Core.NodeState.Initial);
                userType.AddEnumValue("Loading", global::Telerik.Core.NodeState.Loading);
                userType.AddEnumValue("Loaded", global::Telerik.Core.NodeState.Loaded);
                userType.AddEnumValue("Unloading", global::Telerik.Core.NodeState.Unloading);
                userType.AddEnumValue("Unloaded", global::Telerik.Core.NodeState.Unloaded);
                xamlType = userType;
                break;

            case 191:   //  Telerik.Core.RadRect
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 192:   //  Telerik.Core.Element
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.Node"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 193:   //  Telerik.UI.Xaml.Controls.Chart.CartesianAnnotationCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>"));
                userType.CollectionAdd = VectorAdd_193_CartesianAnnotationCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 194:   //  Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>"));
                userType.CollectionAdd = VectorAdd_194_PresenterCollection;
                xamlType = userType;
                break;

            case 195:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_195_Collection;
                userType.CollectionAdd = VectorAdd_195_Collection;
                xamlType = userType;
                break;

            case 196:   //  Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotation"));
                xamlType = userType;
                break;

            case 197:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotation
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("ClipToPlotArea");
                xamlType = userType;
                break;

            case 198:   //  Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartGrid"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 199:   //  Telerik.UI.Xaml.Controls.Chart.ChartGrid
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                xamlType = userType;
                break;

            case 200:   //  Windows.Foundation.Size
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 201:   //  Windows.Foundation.Point
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 202:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 203:   //  Telerik.UI.Xaml.Controls.Chart.ChartPalette
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_203_ChartPalette;
                userType.AddMemberName("Name");
                userType.AddMemberName("FillEntries");
                userType.AddMemberName("SpecialFillEntries");
                userType.AddMemberName("StrokeEntries");
                userType.AddMemberName("SpecialStrokeEntries");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 204:   //  Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.None);
                userType.AddEnumValue("DefaultDark", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultDark);
                userType.AddEnumValue("DefaultLight", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultLight);
                userType.AddEnumValue("DefaultDarkSelected", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultDarkSelected);
                userType.AddEnumValue("DefaultLightSelected", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultLightSelected);
                xamlType = userType;
                break;

            case 205:   //  Telerik.UI.Xaml.Controls.Chart.LinearAxis
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis"));
                userType.Activator = Activate_205_LinearAxis;
                userType.AddMemberName("MajorStep");
                xamlType = userType;
                break;

            case 206:   //  Telerik.UI.Xaml.Controls.Chart.NumericalAxis
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis"));
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("RangeExtendDirection");
                userType.AddMemberName("DesiredTickCount");
                userType.AddMemberName("ActualRange");
                xamlType = userType;
                break;

            case 207:   //  Telerik.Charting.NumericalAxisRangeExtendDirection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.NumericalAxisRangeExtendDirection.None);
                userType.AddEnumValue("Positive", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Positive);
                userType.AddEnumValue("Negative", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Negative);
                userType.AddEnumValue("Both", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Both);
                xamlType = userType;
                break;

            case 208:   //  Telerik.Core.ValueRange`1<Double>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 209:   //  Telerik.Charting.AxisHorizontalLocation
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.Charting.AxisHorizontalLocation.Left);
                userType.AddEnumValue("Right", global::Telerik.Charting.AxisHorizontalLocation.Right);
                xamlType = userType;
                break;

            case 210:   //  Telerik.Charting.AxisVerticalLocation
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bottom", global::Telerik.Charting.AxisVerticalLocation.Bottom);
                userType.AddEnumValue("Top", global::Telerik.Charting.AxisVerticalLocation.Top);
                xamlType = userType;
                break;

            case 211:   //  Telerik.Charting.IContentFormatter
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 212:   //  Telerik.Charting.AxisLastLabelVisibility
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Telerik.Charting.AxisLastLabelVisibility.Visible);
                userType.AddEnumValue("Hidden", global::Telerik.Charting.AxisLastLabelVisibility.Hidden);
                userType.AddEnumValue("Clip", global::Telerik.Charting.AxisLastLabelVisibility.Clip);
                xamlType = userType;
                break;

            case 213:   //  Telerik.Charting.AxisLabelFitMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.AxisLabelFitMode.None);
                userType.AddEnumValue("MultiLine", global::Telerik.Charting.AxisLabelFitMode.MultiLine);
                userType.AddEnumValue("Rotate", global::Telerik.Charting.AxisLabelFitMode.Rotate);
                xamlType = userType;
                break;

            case 214:   //  Telerik.UI.Xaml.Controls.Chart.CategoricalAxis
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis"));
                userType.Activator = Activate_214_CategoricalAxis;
                userType.AddMemberName("AutoGroup");
                userType.AddMemberName("MajorTickInterval");
                userType.AddMemberName("PlotMode");
                userType.AddMemberName("GapLength");
                xamlType = userType;
                break;

            case 215:   //  Telerik.Charting.AxisPlotMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BetweenTicks", global::Telerik.Charting.AxisPlotMode.BetweenTicks);
                userType.AddEnumValue("OnTicks", global::Telerik.Charting.AxisPlotMode.OnTicks);
                userType.AddEnumValue("OnTicksPadded", global::Telerik.Charting.AxisPlotMode.OnTicksPadded);
                xamlType = userType;
                break;

            case 216:   //  Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartBehavior"));
                userType.Activator = Activate_216_ChartSelectionBehavior;
                userType.AddMemberName("DataPointSelectionMode");
                userType.AddMemberName("SeriesSelectionMode");
                userType.AddMemberName("TouchTargetOverhang");
                userType.AddMemberName("SelectedPoints");
                userType.AddMemberName("SelectedSeries");
                xamlType = userType;
                break;

            case 217:   //  Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode.None);
                userType.AddEnumValue("Single", global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode.Single);
                userType.AddEnumValue("Multiple", global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode.Multiple);
                xamlType = userType;
                break;

            case 218:   //  System.Collections.Generic.IEnumerable`1<Telerik.Charting.DataPoint>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 219:   //  System.Collections.Generic.IEnumerable`1<Telerik.UI.Xaml.Controls.Chart.ChartSeries>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 220:   //  Telerik.UI.Xaml.Controls.Chart.BarSeries
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries"));
                userType.Activator = Activate_220_BarSeries;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints");
                userType.AddMemberName("PaletteMode");
                userType.AddMemberName("LegendTitleBinding");
                xamlType = userType;
                break;

            case 221:   //  Telerik.UI.Xaml.Controls.Chart.CategoricalSeries
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase"));
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints");
                userType.AddMemberName("CombineMode");
                userType.AddMemberName("StackGroupKey");
                xamlType = userType;
                break;

            case 222:   //  Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries"));
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints");
                userType.AddMemberName("DataPoints");
                userType.AddMemberName("CategoryBinding");
                userType.AddMemberName("ValueBinding");
                xamlType = userType;
                break;

            case 223:   //  Telerik.UI.Xaml.Controls.Chart.SeriesPaletteMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Series", global::Telerik.UI.Xaml.Controls.Chart.SeriesPaletteMode.Series);
                userType.AddEnumValue("DataPoint", global::Telerik.UI.Xaml.Controls.Chart.SeriesPaletteMode.DataPoint);
                xamlType = userType;
                break;

            case 224:   //  Telerik.Charting.ChartSeriesCombineMode
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.ChartSeriesCombineMode.None);
                userType.AddEnumValue("Cluster", global::Telerik.Charting.ChartSeriesCombineMode.Cluster);
                userType.AddEnumValue("Stack", global::Telerik.Charting.ChartSeriesCombineMode.Stack);
                userType.AddEnumValue("Stack100", global::Telerik.Charting.ChartSeriesCombineMode.Stack100);
                xamlType = userType;
                break;

            case 225:   //  Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.DataPointBinding"));
                userType.Activator = Activate_225_PropertyNameDataPointBinding;
                userType.AddMemberName("PropertyName");
                xamlType = userType;
                break;

            case 226:   //  SAMVoteApp.MainPage
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_226_MainPage;
                xamlType = userType;
                break;

            case 227:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 228:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 229:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_229_ChartAnnotationLabelDefinition;
                userType.AddMemberName("Format");
                userType.AddMemberName("Template");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Location");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("HorizontalOffset");
                userType.AddMemberName("VerticalOffset");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 230:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Left);
                userType.AddEnumValue("Top", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Top);
                userType.AddEnumValue("Right", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Right);
                userType.AddEnumValue("Bottom", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Bottom);
                userType.AddEnumValue("Inside", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Inside);
                xamlType = userType;
                break;

            case 231:   //  Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_231_PaletteEntryCollection;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.Brushes");
                userType.AddMemberName("Brushes");
                xamlType = userType;
                break;

            case 232:   //  System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_232_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 233:   //  Telerik.UI.Xaml.Controls.Input.HighlightStyle
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_233_HighlightStyle;
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("FontSize");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 234:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 235:   //  Telerik.UI.Xaml.Controls.Input.FontWeightName
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Black", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Black);
                userType.AddEnumValue("Bold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Bold);
                userType.AddEnumValue("ExtraBlack", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBlack);
                userType.AddEnumValue("ExtraBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBold);
                userType.AddEnumValue("ExtraLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraLight);
                userType.AddEnumValue("Light", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Light);
                userType.AddEnumValue("Medium", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Medium);
                userType.AddEnumValue("Normal", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Normal);
                userType.AddEnumValue("SemiBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiBold);
                userType.AddEnumValue("SemiLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiLight);
                userType.AddEnumValue("Thin", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Thin);
                xamlType = userType;
                break;

            case 236:   //  Windows.UI.Text.FontStyle
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 237:   //  Telerik.UI.Xaml.Controls.Input.CalendarCellStyle
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_237_CalendarCellStyle;
                userType.AddMemberName("ContentStyle");
                userType.AddMemberName("DecorationStyle");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 238:   //  Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.Activator = Activate_238_RadRadialMenu;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("ShowToolTip");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("InnerNavigationRadiusFactor");
                userType.AddMemberName("InnerRadiusFactor");
                userType.AddMemberName("OuterRadiusFactor");
                userType.AddMemberName("ContentMenuBackgroundStyle");
                userType.AddMemberName("NavigationMenuBackgroundStyle");
                userType.AddMemberName("CommandService");
                userType.AddMemberName("Commands");
                userType.AddMemberName("TargetElement");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 239:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>"));
                userType.CollectionAdd = VectorAdd_239_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 240:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_240_Collection;
                userType.CollectionAdd = VectorAdd_240_Collection;
                xamlType = userType;
                break;

            case 241:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.Activator = Activate_241_RadialMenuItem;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ChildItems");
                userType.AddMemberName("ChildItems");
                userType.AddMemberName("ToolTipContent");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("IsEnabled");
                userType.AddMemberName("Command");
                userType.AddMemberName("ParentItem");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("GroupName");
                userType.AddMemberName("Selectable");
                userType.AddMemberName("Deselectable");
                userType.AddMemberName("Header");
                userType.AddMemberName("IconContent");
                userType.AddMemberName("ContentSectorBackground");
                xamlType = userType;
                break;

            case 242:   //  System.Windows.Input.ICommand
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 243:   //  Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 244:   //  Telerik.UI.Xaml.Controls.Primitives.CommandServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 245:   //  Telerik.UI.Xaml.Controls.Primitives.ServiceBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 246:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("Owner");
                xamlType = userType;
                break;

            case 247:   //  Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.CollectionAdd = VectorAdd_247_CommandCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 248:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObjectCollection`2<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu, Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.CollectionAdd = VectorAdd_248_AttachableObjectCollection;
                xamlType = userType;
                break;

            case 249:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>"));
                userType.Activator = Activate_249_ObservableCollection;
                userType.CollectionAdd = VectorAdd_249_ObservableCollection;
                xamlType = userType;
                break;

            case 250:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_250_Collection;
                userType.CollectionAdd = VectorAdd_250_Collection;
                xamlType = userType;
                break;

            case 251:   //  Telerik.UI.Xaml.Controls.Primitives.ControlCommandBase`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>"));
                xamlType = userType;
                break;

            case 252:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>"));
                userType.Activator = Activate_252_RadialMenuTriggerBehavior;
                userType.AddMemberName("AttachTriggers");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 253:   //  Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadDependencyObject"));
                userType.AddMemberName("Owner");
                xamlType = userType;
                break;

            case 254:   //  Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers
                userType = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.None);
                userType.AddEnumValue("PointerPressed", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PointerPressed);
                userType.AddEnumValue("PointerOver", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PointerOver);
                userType.AddEnumValue("Focused", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.Focused);
                userType.AddEnumValue("PressedOrFocused", global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers.PressedOrFocused);
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Esri.ArcGISRuntime.Metadata.XamlMetadataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Esri.ArcGISRuntime.Esri_ArcGISRuntime_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Chart.Chart_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.DataVisualization.DataVisualization_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Grid.Grid_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Input.Input_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Primitives.Primitives_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_RadDataGrid_AutoGenerateColumns(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AutoGenerateColumns;
        }
        private void set_0_RadDataGrid_AutoGenerateColumns(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.AutoGenerateColumns = (global::System.Boolean)Value;
        }
        private object get_1_RadDataGrid_UserGroupMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.UserGroupMode;
        }
        private void set_1_RadDataGrid_UserGroupMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.UserGroupMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode)Value;
        }
        private object get_2_RadDataGrid_Columns(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.Columns;
        }
        private object get_3_DataGridColumn_CellDecorationStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CellDecorationStyle;
        }
        private void set_3_DataGridColumn_CellDecorationStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CellDecorationStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_4_DataGridColumn_CellDecorationStyleSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CellDecorationStyleSelector;
        }
        private void set_4_DataGridColumn_CellDecorationStyleSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CellDecorationStyleSelector = (global::Windows.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_5_DataGridColumn_Name(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.Name;
        }
        private void set_5_DataGridColumn_Name(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_6_DataGridColumn_CanUserEdit(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CanUserEdit;
        }
        private void set_6_DataGridColumn_CanUserEdit(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CanUserEdit = (global::System.Boolean)Value;
        }
        private object get_7_DataGridColumn_CanUserFilter(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CanUserFilter;
        }
        private void set_7_DataGridColumn_CanUserFilter(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CanUserFilter = (global::System.Boolean)Value;
        }
        private object get_8_DataGridColumn_CanUserReorder(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CanUserReorder;
        }
        private void set_8_DataGridColumn_CanUserReorder(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CanUserReorder = (global::System.Boolean)Value;
        }
        private object get_9_DataGridColumn_CanUserGroup(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CanUserGroup;
        }
        private void set_9_DataGridColumn_CanUserGroup(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CanUserGroup = (global::System.Boolean)Value;
        }
        private object get_10_DataGridColumn_CanUserSort(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.CanUserSort;
        }
        private void set_10_DataGridColumn_CanUserSort(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.CanUserSort = (global::System.Boolean)Value;
        }
        private object get_11_DataGridColumn_HeaderStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.HeaderStyle;
        }
        private void set_11_DataGridColumn_HeaderStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.HeaderStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_12_DataGridColumn_SizeMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.SizeMode;
        }
        private void set_12_DataGridColumn_SizeMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.SizeMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode)Value;
        }
        private object get_13_DataGridColumn_Width(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.Width;
        }
        private void set_13_DataGridColumn_Width(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_14_DataGridColumn_ActualWidth(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.ActualWidth;
        }
        private object get_15_DataGridColumn_IsAutoGenerated(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.IsAutoGenerated;
        }
        private object get_16_DataGridColumn_Header(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.Header;
        }
        private void set_16_DataGridColumn_Header(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_17_DataGridColumn_SortDirection(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            return that.SortDirection;
        }
        private void set_17_DataGridColumn_SortDirection(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridColumn)instance;
            that.SortDirection = (global::Telerik.UI.Xaml.Controls.Grid.SortDirection)Value;
        }
        private object get_18_RadDataGrid_CurrentItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.CurrentItem;
        }
        private object get_19_RadDataGrid_EnsureCurrentItemIntoView(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.EnsureCurrentItemIntoView;
        }
        private void set_19_RadDataGrid_EnsureCurrentItemIntoView(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.EnsureCurrentItemIntoView = (global::System.Boolean)Value;
        }
        private object get_20_RadDataGrid_IsSynchronizedWithCurrentItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.IsSynchronizedWithCurrentItem;
        }
        private void set_20_RadDataGrid_IsSynchronizedWithCurrentItem(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.IsSynchronizedWithCurrentItem = (global::System.Boolean)Value;
        }
        private object get_21_RadDataGrid_ItemsSource(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.ItemsSource;
        }
        private void set_21_RadDataGrid_ItemsSource(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_22_RadDataGrid_IncrementalLoadingMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.IncrementalLoadingMode;
        }
        private void set_22_RadDataGrid_IncrementalLoadingMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.IncrementalLoadingMode = (global::Telerik.Data.Core.BatchLoadingMode)Value;
        }
        private object get_23_RadDataGrid_SortDescriptors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SortDescriptors;
        }
        private object get_24_OrderedDescriptor_SortOrder(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor)instance;
            return that.SortOrder;
        }
        private void set_24_OrderedDescriptor_SortOrder(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor)instance;
            that.SortOrder = (global::Telerik.Data.Core.SortOrder)Value;
        }
        private object get_25_RadDataGrid_GroupDescriptors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupDescriptors;
        }
        private object get_26_GroupDescriptorBase_DisplayContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)instance;
            return that.DisplayContent;
        }
        private void set_26_GroupDescriptorBase_DisplayContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)instance;
            that.DisplayContent = (global::System.Object)Value;
        }
        private object get_27_RadDataGrid_FilterDescriptors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.FilterDescriptors;
        }
        private object get_28_RadDataGrid_AggregateDescriptors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AggregateDescriptors;
        }
        private object get_29_RadDataGrid_UserEditMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.UserEditMode;
        }
        private void set_29_RadDataGrid_UserEditMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.UserEditMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridUserEditMode)Value;
        }
        private object get_30_RadDataGrid_RowBackground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.RowBackground;
        }
        private void set_30_RadDataGrid_RowBackground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.RowBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_31_RadDataGrid_RowBackgroundSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.RowBackgroundSelector;
        }
        private void set_31_RadDataGrid_RowBackgroundSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.RowBackgroundSelector = (global::Telerik.UI.Xaml.Controls.Primitives.ObjectSelector<global::Windows.UI.Xaml.Media.Brush>)Value;
        }
        private object get_32_RadDataGrid_AlternateRowBackground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AlternateRowBackground;
        }
        private void set_32_RadDataGrid_AlternateRowBackground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.AlternateRowBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_33_RadDataGrid_AlternationStep(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AlternationStep;
        }
        private void set_33_RadDataGrid_AlternationStep(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.AlternationStep = (global::System.Int32)Value;
        }
        private object get_34_RadDataGrid_AlternationStartIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.AlternationStartIndex;
        }
        private void set_34_RadDataGrid_AlternationStartIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.AlternationStartIndex = (global::System.Int32)Value;
        }
        private object get_35_RadDataGrid_GridLinesBrush(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GridLinesBrush;
        }
        private void set_35_RadDataGrid_GridLinesBrush(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GridLinesBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_36_RadDataGrid_GridLinesVisibility(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GridLinesVisibility;
        }
        private void set_36_RadDataGrid_GridLinesVisibility(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GridLinesVisibility = (global::Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility)Value;
        }
        private object get_37_RadDataGrid_GridLinesThickness(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GridLinesThickness;
        }
        private void set_37_RadDataGrid_GridLinesThickness(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GridLinesThickness = (global::System.Double)Value;
        }
        private object get_38_RadDataGrid_SelectionUnit(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SelectionUnit;
        }
        private void set_38_RadDataGrid_SelectionUnit(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.SelectionUnit = (global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit)Value;
        }
        private object get_39_RadDataGrid_SelectedItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SelectedItem;
        }
        private void set_39_RadDataGrid_SelectedItem(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_40_RadDataGrid_SelectionMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SelectionMode;
        }
        private void set_40_RadDataGrid_SelectionMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.SelectionMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode)Value;
        }
        private object get_41_RadDataGrid_SelectedItems(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.SelectedItems;
        }
        private object get_42_RadDataGrid_IsBusyIndicatorEnabled(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.IsBusyIndicatorEnabled;
        }
        private void set_42_RadDataGrid_IsBusyIndicatorEnabled(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.IsBusyIndicatorEnabled = (global::System.Boolean)Value;
        }
        private object get_43_RadDataGrid_UserFilterMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.UserFilterMode;
        }
        private void set_43_RadDataGrid_UserFilterMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.UserFilterMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridUserFilterMode)Value;
        }
        private object get_44_RadDataGrid_UserColumnReorderMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.UserColumnReorderMode;
        }
        private void set_44_RadDataGrid_UserColumnReorderMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.UserColumnReorderMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode)Value;
        }
        private object get_45_RadDataGrid_UserSortMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.UserSortMode;
        }
        private void set_45_RadDataGrid_UserSortMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.UserSortMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode)Value;
        }
        private object get_46_RadDataGrid_IndentWidth(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.IndentWidth;
        }
        private void set_46_RadDataGrid_IndentWidth(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.IndentWidth = (global::System.Double)Value;
        }
        private object get_47_RadDataGrid_GroupHeaderDisplayMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderDisplayMode;
        }
        private void set_47_RadDataGrid_GroupHeaderDisplayMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderDisplayMode = (global::Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode)Value;
        }
        private object get_48_RadDataGrid_GroupHeaderTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderTemplate;
        }
        private void set_48_RadDataGrid_GroupHeaderTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_49_RadDataGrid_GroupHeaderTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderTemplateSelector;
        }
        private void set_49_RadDataGrid_GroupHeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_50_RadDataGrid_GroupHeaderStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderStyle;
        }
        private void set_50_RadDataGrid_GroupHeaderStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_51_RadDataGrid_GroupHeaderStyleSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.GroupHeaderStyleSelector;
        }
        private void set_51_RadDataGrid_GroupHeaderStyleSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.GroupHeaderStyleSelector = (global::Windows.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_52_RadDataGrid_Commands(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.Commands;
        }
        private object get_53_AttachableObject_Owner(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid>)instance;
            return that.Owner;
        }
        private object get_54_RadDataGrid_RowHeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.RowHeight;
        }
        private void set_54_RadDataGrid_RowHeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.RowHeight = (global::System.Double)Value;
        }
        private object get_55_RadDataGrid_CommandService(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.CommandService;
        }
        private object get_56_RadDataGrid_DragBehavior(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.DragBehavior;
        }
        private void set_56_RadDataGrid_DragBehavior(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            that.DragBehavior = (global::Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior)Value;
        }
        private object get_57_RadDataGrid_HitTestService(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.RadDataGrid)instance;
            return that.HitTestService;
        }
        private object get_58_RadControl_CurrentVisualState(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }
        private object get_59_DataGridTemplateColumn_CellContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn)instance;
            return that.CellContentTemplate;
        }
        private void set_59_DataGridTemplateColumn_CellContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn)instance;
            that.CellContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_60_DataGridTemplateColumn_CellContentTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn)instance;
            return that.CellContentTemplateSelector;
        }
        private void set_60_DataGridTemplateColumn_CellContentTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn)instance;
            that.CellContentTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_61_DataGridTemplateColumn_SortDescriptor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn)instance;
            return that.SortDescriptor;
        }
        private void set_61_DataGridTemplateColumn_SortDescriptor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn)instance;
            that.SortDescriptor = (global::Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase)Value;
        }
        private object get_62_DataGridTemplateColumn_GroupDescriptor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn)instance;
            return that.GroupDescriptor;
        }
        private void set_62_DataGridTemplateColumn_GroupDescriptor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn)instance;
            that.GroupDescriptor = (global::Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase)Value;
        }
        private object get_63_MapView_Map(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Map;
        }
        private void set_63_MapView_Map(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.Map = (global::Esri.ArcGISRuntime.Controls.Map)Value;
        }
        private object get_64_Map_Layers(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            return that.Layers;
        }
        private void set_64_Map_Layers(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            that.Layers = (global::Esri.ArcGISRuntime.Layers.LayerCollection)Value;
        }
        private object get_65_Layer_FullExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.FullExtent;
        }
        private object get_66_Layer_Status(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.Status;
        }
        private object get_67_Layer_InitializationException(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.InitializationException;
        }
        private object get_68_Layer_DefaultSpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.DefaultSpatialReference;
        }
        private object get_69_Layer_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.Opacity;
        }
        private void set_69_Layer_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_70_Layer_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.IsVisible;
        }
        private void set_70_Layer_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_71_Layer_DisplayName(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.DisplayName;
        }
        private void set_71_Layer_DisplayName(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_72_Layer_ShowLegend(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.ShowLegend;
        }
        private void set_72_Layer_ShowLegend(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.ShowLegend = (global::System.Boolean)Value;
        }
        private object get_73_Layer_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.MinScale;
        }
        private void set_73_Layer_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_74_Layer_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.MaxScale;
        }
        private void set_74_Layer_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_75_Layer_ID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.ID;
        }
        private void set_75_Layer_ID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.ID = (global::System.String)Value;
        }
        private object get_76_MapView_IsNavigating(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.IsNavigating;
        }
        private object get_77_MapView_LocationDisplay(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.LocationDisplay;
        }
        private void set_77_MapView_LocationDisplay(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.LocationDisplay = (global::Esri.ArcGISRuntime.Location.LocationDisplay)Value;
        }
        private object get_78_MapView_MapGrid(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.MapGrid;
        }
        private void set_78_MapView_MapGrid(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.MapGrid = (global::Esri.ArcGISRuntime.Controls.MapGrid)Value;
        }
        private object get_79_MapGrid_Levels(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGrid)instance;
            return that.Levels;
        }
        private void set_79_MapGrid_Levels(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGrid)instance;
            that.Levels = (global::Esri.ArcGISRuntime.Controls.MapGridLevelCollection)Value;
        }
        private object get_80_MapGridLevel_LineColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.LineColor;
        }
        private void set_80_MapGridLevel_LineColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.LineColor = (global::Windows.UI.Color)Value;
        }
        private object get_81_MapGridLevel_LineWidth(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.LineWidth;
        }
        private void set_81_MapGridLevel_LineWidth(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.LineWidth = (global::System.Int32)Value;
        }
        private object get_82_MapGridLevel_LabelColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.LabelColor;
        }
        private void set_82_MapGridLevel_LabelColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.LabelColor = (global::Windows.UI.Color)Value;
        }
        private object get_83_MapGridLevel_AreLabelsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.AreLabelsVisible;
        }
        private void set_83_MapGridLevel_AreLabelsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.AreLabelsVisible = (global::System.Boolean)Value;
        }
        private object get_84_MapGridLevel_AreLinesVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            return that.AreLinesVisible;
        }
        private void set_84_MapGridLevel_AreLinesVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapGridLevel)instance;
            that.AreLinesVisible = (global::System.Boolean)Value;
        }
        private object get_85_MapView_Extent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Extent;
        }
        private object get_86_MapView_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.SpatialReference;
        }
        private object get_87_MapView_Scale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Scale;
        }
        private object get_88_MapView_UnitsPerPixel(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.UnitsPerPixel;
        }
        private object get_89_MapView_MaximumExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.MaximumExtent;
        }
        private void set_89_MapView_MaximumExtent(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.MaximumExtent = (global::Esri.ArcGISRuntime.Geometry.Envelope)Value;
        }
        private object get_90_MapView_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.MaxScale;
        }
        private void set_90_MapView_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_91_MapView_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.MinScale;
        }
        private void set_91_MapView_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_92_MapView_WrapAround(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.WrapAround;
        }
        private void set_92_MapView_WrapAround(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.WrapAround = (global::System.Boolean)Value;
        }
        private object get_93_MapView_TimeExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.TimeExtent;
        }
        private void set_93_MapView_TimeExtent(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.TimeExtent = (global::Esri.ArcGISRuntime.Data.TimeExtent)Value;
        }
        private object get_94_MapView_Rotation(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Rotation;
        }
        private void set_94_MapView_Rotation(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.Rotation = (global::System.Double)Value;
        }
        private object get_95_MapView_Editor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Editor;
        }
        private void set_95_MapView_Editor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.Editor = (global::Esri.ArcGISRuntime.Controls.Editor)Value;
        }
        private object get_96_MapView_ShowMagnifierOnTapAndHold(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.ShowMagnifierOnTapAndHold;
        }
        private void set_96_MapView_ShowMagnifierOnTapAndHold(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            that.ShowMagnifierOnTapAndHold = (global::System.Boolean)Value;
        }
        private object get_97_MapView_Overlays(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.MapView)instance;
            return that.Overlays;
        }
        private object get_98_MapView_MapOverlayAnchor(object instance)
        {
            return global::Esri.ArcGISRuntime.Controls.MapView.GetMapOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_98_MapView_MapOverlayAnchor(object instance, object Value)
        {
            global::Esri.ArcGISRuntime.Controls.MapView.SetMapOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance, (global::Esri.ArcGISRuntime.Geometry.MapPoint)Value);
        }
        private object get_99_Map_InitialExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            return that.InitialExtent;
        }
        private void set_99_Map_InitialExtent(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            that.InitialExtent = (global::Esri.ArcGISRuntime.Geometry.Envelope)Value;
        }
        private object get_100_ArcGISTiledMapServiceLayer_ServiceUri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.ServiceUri;
        }
        private void set_100_ArcGISTiledMapServiceLayer_ServiceUri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            that.ServiceUri = (global::System.String)Value;
        }
        private object get_101_ArcGISTiledMapServiceLayer_Token(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.Token;
        }
        private void set_101_ArcGISTiledMapServiceLayer_Token(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            that.Token = (global::System.String)Value;
        }
        private object get_102_ArcGISTiledMapServiceLayer_ServiceInfo(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.ServiceInfo;
        }
        private object get_103_ArcGISTiledMapServiceLayer_HttpMessageHandler(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.HttpMessageHandler;
        }
        private void set_103_ArcGISTiledMapServiceLayer_HttpMessageHandler(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            that.HttpMessageHandler = (global::System.Net.Http.HttpMessageHandler)Value;
        }
        private object get_104_TiledLayer_TileInfo(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.TileInfo;
        }
        private object get_105_TiledLayer_Brightness(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Brightness;
        }
        private void set_105_TiledLayer_Brightness(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Brightness = (global::System.Double)Value;
        }
        private object get_106_TiledLayer_Contrast(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Contrast;
        }
        private void set_106_TiledLayer_Contrast(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Contrast = (global::System.Double)Value;
        }
        private object get_107_TiledLayer_Gamma(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Gamma;
        }
        private void set_107_TiledLayer_Gamma(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Gamma = (global::System.Double)Value;
        }
        private object get_108_Envelope_XMin(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.XMin;
        }
        private void set_108_Envelope_XMin(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            that.XMin = (global::System.Double)Value;
        }
        private object get_109_Envelope_YMin(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.YMin;
        }
        private void set_109_Envelope_YMin(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            that.YMin = (global::System.Double)Value;
        }
        private object get_110_Envelope_XMax(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.XMax;
        }
        private void set_110_Envelope_XMax(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            that.XMax = (global::System.Double)Value;
        }
        private object get_111_Envelope_YMax(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.YMax;
        }
        private void set_111_Envelope_YMax(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            that.YMax = (global::System.Double)Value;
        }
        private object get_112_Envelope_GeometryType(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.GeometryType;
        }
        private object get_113_Envelope_ZMin(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.ZMin;
        }
        private void set_113_Envelope_ZMin(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            that.ZMin = (global::System.Double)Value;
        }
        private object get_114_Envelope_ZMax(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.ZMax;
        }
        private void set_114_Envelope_ZMax(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            that.ZMax = (global::System.Double)Value;
        }
        private object get_115_Envelope_MMin(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.MMin;
        }
        private void set_115_Envelope_MMin(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            that.MMin = (global::System.Double)Value;
        }
        private object get_116_Envelope_MMax(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.MMax;
        }
        private void set_116_Envelope_MMax(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            that.MMax = (global::System.Double)Value;
        }
        private object get_117_Envelope_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.Width;
        }
        private object get_118_Envelope_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.Height;
        }
        private object get_119_Envelope_Extent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.Extent;
        }
        private object get_120_Envelope_HasM(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.HasM;
        }
        private object get_121_Envelope_HasZ(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.HasZ;
        }
        private object get_122_Envelope_IsEmpty(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Envelope)instance;
            return that.IsEmpty;
        }
        private object get_123_Geometry_Dimension(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Geometry)instance;
            return that.Dimension;
        }
        private object get_124_Geometry_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Geometry)instance;
            return that.SpatialReference;
        }
        private void set_124_Geometry_SpatialReference(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Geometry.Geometry)instance;
            that.SpatialReference = (global::Esri.ArcGISRuntime.Geometry.SpatialReference)Value;
        }
        private object get_125_ArcGISDynamicMapServiceLayer_ServiceUri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.ServiceUri;
        }
        private void set_125_ArcGISDynamicMapServiceLayer_ServiceUri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.ServiceUri = (global::System.String)Value;
        }
        private object get_126_ArcGISDynamicMapServiceLayer_ServiceInfo(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.ServiceInfo;
        }
        private object get_127_ArcGISDynamicMapServiceLayer_VisibleLayers(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.VisibleLayers;
        }
        private void set_127_ArcGISDynamicMapServiceLayer_VisibleLayers(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.VisibleLayers = (global::System.Collections.ObjectModel.ObservableCollection<global::System.Int32>)Value;
        }
        private object get_128_ArcGISDynamicMapServiceLayer_Token(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.Token;
        }
        private void set_128_ArcGISDynamicMapServiceLayer_Token(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.Token = (global::System.String)Value;
        }
        private object get_129_ArcGISDynamicMapServiceLayer_HttpMessageHandler(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.HttpMessageHandler;
        }
        private void set_129_ArcGISDynamicMapServiceLayer_HttpMessageHandler(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.HttpMessageHandler = (global::System.Net.Http.HttpMessageHandler)Value;
        }
        private object get_130_ArcGISDynamicMapServiceLayer_ImageFormat(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.ImageFormat;
        }
        private void set_130_ArcGISDynamicMapServiceLayer_ImageFormat(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.ImageFormat = (global::Esri.ArcGISRuntime.ArcGISServices.ImageFormat)Value;
        }
        private object get_131_ArcGISDynamicMapServiceLayer_LayerDefinitions(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.LayerDefinitions;
        }
        private void set_131_ArcGISDynamicMapServiceLayer_LayerDefinitions(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.LayerDefinitions = (global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.LayerDefinition>)Value;
        }
        private object get_132_LayerDefinition_LayerID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDefinition)instance;
            return that.LayerID;
        }
        private void set_132_LayerDefinition_LayerID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDefinition)instance;
            that.LayerID = (global::System.Int32)Value;
        }
        private object get_133_LayerDefinition_Definition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDefinition)instance;
            return that.Definition;
        }
        private void set_133_LayerDefinition_Definition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDefinition)instance;
            that.Definition = (global::System.String)Value;
        }
        private object get_134_ArcGISDynamicMapServiceLayer_LayerTimeOptions(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.LayerTimeOptions;
        }
        private void set_134_ArcGISDynamicMapServiceLayer_LayerTimeOptions(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.LayerTimeOptions = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptionCollection)Value;
        }
        private object get_135_LayerTimeOptions_LayerID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            return that.LayerID;
        }
        private void set_135_LayerTimeOptions_LayerID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            that.LayerID = (global::System.Int32)Value;
        }
        private object get_136_LayerTimeOptions_UseTime(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            return that.UseTime;
        }
        private void set_136_LayerTimeOptions_UseTime(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            that.UseTime = (global::System.Boolean)Value;
        }
        private object get_137_LayerTimeOptions_TimeCumulative(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            return that.TimeCumulative;
        }
        private void set_137_LayerTimeOptions_TimeCumulative(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            that.TimeCumulative = (global::System.Boolean)Value;
        }
        private object get_138_LayerTimeOptions_TimeOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            return that.TimeOffset;
        }
        private void set_138_LayerTimeOptions_TimeOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            that.TimeOffset = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_139_LayerTimeOptions_TimeOffsetUnits(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            return that.TimeOffsetUnits;
        }
        private void set_139_LayerTimeOptions_TimeOffsetUnits(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerTimeOptions)instance;
            that.TimeOffsetUnits = (global::Esri.ArcGISRuntime.ArcGISServices.TimeUnit)Value;
        }
        private object get_140_ArcGISDynamicMapServiceLayer_LayerDrawingOptions(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.LayerDrawingOptions;
        }
        private void set_140_ArcGISDynamicMapServiceLayer_LayerDrawingOptions(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.LayerDrawingOptions = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptionCollection)Value;
        }
        private object get_141_LayerDrawingOptions_LayerID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            return that.LayerID;
        }
        private void set_141_LayerDrawingOptions_LayerID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            that.LayerID = (global::System.Int32)Value;
        }
        private object get_142_LayerDrawingOptions_Renderer(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            return that.Renderer;
        }
        private void set_142_LayerDrawingOptions_Renderer(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            that.Renderer = (global::Esri.ArcGISRuntime.Symbology.Renderer)Value;
        }
        private object get_143_LayerDrawingOptions_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            return that.Opacity;
        }
        private void set_143_LayerDrawingOptions_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_144_LayerDrawingOptions_ScaleSymbols(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            return that.ScaleSymbols;
        }
        private void set_144_LayerDrawingOptions_ScaleSymbols(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            that.ScaleSymbols = (global::System.Boolean)Value;
        }
        private object get_145_LayerDrawingOptions_ShowLabels(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            return that.ShowLabels;
        }
        private void set_145_LayerDrawingOptions_ShowLabels(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_146_LayerDrawingOptions_LabelingInfos(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            return that.LabelingInfos;
        }
        private void set_146_LayerDrawingOptions_LabelingInfos(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LayerDrawingOptions)instance;
            that.LabelingInfos = (global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>)Value;
        }
        private object get_147_DynamicLabelingInfo_LabelPlacement(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            return that.LabelPlacement;
        }
        private void set_147_DynamicLabelingInfo_LabelPlacement(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            that.LabelPlacement = (global::Esri.ArcGISRuntime.ArcGISServices.LabelPlacement)Value;
        }
        private object get_148_DynamicLabelingInfo_LabelExpression(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            return that.LabelExpression;
        }
        private void set_148_DynamicLabelingInfo_LabelExpression(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            that.LabelExpression = (global::System.String)Value;
        }
        private object get_149_DynamicLabelingInfo_UseCodedValues(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            return that.UseCodedValues;
        }
        private void set_149_DynamicLabelingInfo_UseCodedValues(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            that.UseCodedValues = (global::System.Boolean)Value;
        }
        private object get_150_DynamicLabelingInfo_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            return that.MinScale;
        }
        private void set_150_DynamicLabelingInfo_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_151_DynamicLabelingInfo_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            return that.MaxScale;
        }
        private void set_151_DynamicLabelingInfo_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_152_DynamicLabelingInfo_Where(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            return that.Where;
        }
        private void set_152_DynamicLabelingInfo_Where(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            that.Where = (global::System.String)Value;
        }
        private object get_153_DynamicLabelingInfo_Symbol(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            return that.Symbol;
        }
        private void set_153_DynamicLabelingInfo_Symbol(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLabelingInfo)instance;
            that.Symbol = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)Value;
        }
        private object get_154_ArcGISDynamicMapServiceLayer_DynamicLayerInfos(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.DynamicLayerInfos;
        }
        private void set_154_ArcGISDynamicMapServiceLayer_DynamicLayerInfos(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.DynamicLayerInfos = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfoCollection)Value;
        }
        private object get_155_DynamicLayerInfo_ID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            return that.ID;
        }
        private void set_155_DynamicLayerInfo_ID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            that.ID = (global::System.Int32)Value;
        }
        private object get_156_DynamicLayerInfo_Name(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            return that.Name;
        }
        private void set_156_DynamicLayerInfo_Name(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_157_DynamicLayerInfo_DefaultVisibility(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            return that.DefaultVisibility;
        }
        private void set_157_DynamicLayerInfo_DefaultVisibility(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            that.DefaultVisibility = (global::System.Boolean)Value;
        }
        private object get_158_DynamicLayerInfo_SubLayerIds(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            return that.SubLayerIds;
        }
        private void set_158_DynamicLayerInfo_SubLayerIds(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            that.SubLayerIds = (global::System.Collections.Generic.IList<global::System.Int32>)Value;
        }
        private object get_159_DynamicLayerInfo_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            return that.MinScale;
        }
        private void set_159_DynamicLayerInfo_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_160_DynamicLayerInfo_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            return that.MaxScale;
        }
        private void set_160_DynamicLayerInfo_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_161_DynamicLayerInfo_Source(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            return that.Source;
        }
        private void set_161_DynamicLayerInfo_Source(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayerInfo)instance;
            that.Source = (global::Esri.ArcGISRuntime.Layers.LayerSource)Value;
        }
        private object get_162_ArcGISDynamicMapServiceLayer_GeodatabaseVersion(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            return that.GeodatabaseVersion;
        }
        private void set_162_ArcGISDynamicMapServiceLayer_GeodatabaseVersion(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer)instance;
            that.GeodatabaseVersion = (global::System.String)Value;
        }
        private object get_163_DynamicLayer_Brightness(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayer)instance;
            return that.Brightness;
        }
        private void set_163_DynamicLayer_Brightness(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayer)instance;
            that.Brightness = (global::System.Double)Value;
        }
        private object get_164_DynamicLayer_Contrast(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayer)instance;
            return that.Contrast;
        }
        private void set_164_DynamicLayer_Contrast(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayer)instance;
            that.Contrast = (global::System.Double)Value;
        }
        private object get_165_DynamicLayer_Gamma(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayer)instance;
            return that.Gamma;
        }
        private void set_165_DynamicLayer_Gamma(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.DynamicLayer)instance;
            that.Gamma = (global::System.Double)Value;
        }
        private object get_166_GraphicsLayer_Graphics(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            return that.Graphics;
        }
        private void set_166_GraphicsLayer_Graphics(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            that.Graphics = (global::Esri.ArcGISRuntime.Layers.GraphicCollection)Value;
        }
        private object get_167_Graphic_Symbol(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.Symbol;
        }
        private void set_167_Graphic_Symbol(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            that.Symbol = (global::Esri.ArcGISRuntime.Symbology.Symbol)Value;
        }
        private object get_168_Graphic_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.IsVisible;
        }
        private void set_168_Graphic_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_169_Graphic_IsSelected(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.IsSelected;
        }
        private void set_169_Graphic_IsSelected(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_170_Graphic_ZIndex(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.ZIndex;
        }
        private void set_170_Graphic_ZIndex(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_171_Feature_Attributes(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Data.Feature)instance;
            return that.Attributes;
        }
        private object get_172_Feature_Geometry(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Data.Feature)instance;
            return that.Geometry;
        }
        private void set_172_Feature_Geometry(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Data.Feature)instance;
            that.Geometry = (global::Esri.ArcGISRuntime.Geometry.Geometry)Value;
        }
        private object get_173_GraphicsLayer_RenderingMode(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            return that.RenderingMode;
        }
        private void set_173_GraphicsLayer_RenderingMode(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            that.RenderingMode = (global::Esri.ArcGISRuntime.Layers.GraphicsRenderingMode)Value;
        }
        private object get_174_GraphicsLayer_SelectionColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            return that.SelectionColor;
        }
        private void set_174_GraphicsLayer_SelectionColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            that.SelectionColor = (global::Windows.UI.Color)Value;
        }
        private object get_175_GraphicsLayer_Renderer(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            return that.Renderer;
        }
        private void set_175_GraphicsLayer_Renderer(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            that.Renderer = (global::Esri.ArcGISRuntime.Symbology.Renderer)Value;
        }
        private object get_176_GraphicsLayer_GraphicsSource(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            return that.GraphicsSource;
        }
        private void set_176_GraphicsLayer_GraphicsSource(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            that.GraphicsSource = (global::System.Collections.Generic.IEnumerable<global::Esri.ArcGISRuntime.Layers.Graphic>)Value;
        }
        private object get_177_GraphicsLayer_IsLabelingEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            return that.IsLabelingEnabled;
        }
        private void set_177_GraphicsLayer_IsLabelingEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            that.IsLabelingEnabled = (global::System.Boolean)Value;
        }
        private object get_178_GraphicsLayer_LabelClasses(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            return that.LabelClasses;
        }
        private void set_178_GraphicsLayer_LabelClasses(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            that.LabelClasses = (global::Esri.ArcGISRuntime.Layers.LabelClassCollection)Value;
        }
        private object get_179_LabelClass_TextExpression(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LabelClass)instance;
            return that.TextExpression;
        }
        private void set_179_LabelClass_TextExpression(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LabelClass)instance;
            that.TextExpression = (global::System.String)Value;
        }
        private object get_180_LabelClass_Symbol(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LabelClass)instance;
            return that.Symbol;
        }
        private void set_180_LabelClass_Symbol(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LabelClass)instance;
            that.Symbol = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)Value;
        }
        private object get_181_GraphicsLayer_SelectedItems(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.GraphicsLayer)instance;
            return that.SelectedItems;
        }
        private object get_182_RadCartesianChart_Series(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Series;
        }
        private object get_183_CartesianSeries_HorizontalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            return that.HorizontalAxis;
        }
        private void set_183_CartesianSeries_HorizontalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            that.HorizontalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_184_CartesianSeries_VerticalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            return that.VerticalAxis;
        }
        private void set_184_CartesianSeries_VerticalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            that.VerticalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_185_PointTemplateSeries_LegendTitle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.LegendTitle;
        }
        private void set_185_PointTemplateSeries_LegendTitle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.LegendTitle = (global::System.String)Value;
        }
        private object get_186_PointTemplateSeries_IsVisibleInLegend(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.IsVisibleInLegend;
        }
        private void set_186_PointTemplateSeries_IsVisibleInLegend(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.IsVisibleInLegend = (global::System.Boolean)Value;
        }
        private object get_187_PointTemplateSeries_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.DefaultVisualStyle;
        }
        private void set_187_PointTemplateSeries_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_188_PointTemplateSeries_PointTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplate;
        }
        private void set_188_PointTemplateSeries_PointTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.PointTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_189_PointTemplateSeries_PointTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplateSelector;
        }
        private void set_189_PointTemplateSeries_PointTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.PointTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_190_PointTemplateSeries_PointTemplates(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplates;
        }
        private object get_191_ChartSeries_IsSelected(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.IsSelected;
        }
        private void set_191_ChartSeries_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_192_ChartSeries_AllowSelect(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.AllowSelect;
        }
        private void set_192_ChartSeries_AllowSelect(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.AllowSelect = (global::System.Boolean)Value;
        }
        private object get_193_ChartSeries_PaletteIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.PaletteIndex;
        }
        private void set_193_ChartSeries_PaletteIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.PaletteIndex = (global::System.Int32)Value;
        }
        private object get_194_ChartSeries_LabelDefinitions(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.LabelDefinitions;
        }
        private object get_195_ChartSeriesLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_195_ChartSeriesLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_196_ChartSeriesLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_196_ChartSeriesLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_197_ChartSeriesLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Template;
        }
        private void set_197_ChartSeriesLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_198_ChartSeriesLabelDefinition_Binding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Binding;
        }
        private void set_198_ChartSeriesLabelDefinition_Binding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Binding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_199_ChartSeriesLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Format;
        }
        private void set_199_ChartSeriesLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_200_ChartSeriesLabelDefinition_Margin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Margin;
        }
        private void set_200_ChartSeriesLabelDefinition_Margin(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Margin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_201_ChartSeriesLabelDefinition_TemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.TemplateSelector;
        }
        private void set_201_ChartSeriesLabelDefinition_TemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.TemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_202_ChartSeriesLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_202_ChartSeriesLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_203_ChartSeriesLabelDefinition_Strategy(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Strategy;
        }
        private void set_203_ChartSeriesLabelDefinition_Strategy(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Strategy = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy)Value;
        }
        private object get_204_ChartSeries_IsSelectedBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.IsSelectedBinding;
        }
        private void set_204_ChartSeries_IsSelectedBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.IsSelectedBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_205_ChartSeries_ShowLabels(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ShowLabels;
        }
        private void set_205_ChartSeries_ShowLabels(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_206_ChartSeries_DisplayName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.DisplayName;
        }
        private void set_206_ChartSeries_DisplayName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_207_ChartSeries_ClipToPlotArea(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ClipToPlotArea;
        }
        private void set_207_ChartSeries_ClipToPlotArea(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ClipToPlotArea = (global::System.Boolean)Value;
        }
        private object get_208_ChartSeries_ItemsSource(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ItemsSource;
        }
        private void set_208_ChartSeries_ItemsSource(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_209_ChartElementPresenter_ZIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            return that.ZIndex;
        }
        private void set_209_ChartElementPresenter_ZIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_210_ChartElementPresenter_Chart(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            return that.Chart;
        }
        private object get_211_RadCartesianChart_HorizontalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.HorizontalAxis;
        }
        private void set_211_RadCartesianChart_HorizontalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.HorizontalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_212_RadCartesianChart_VerticalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.VerticalAxis;
        }
        private void set_212_RadCartesianChart_VerticalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.VerticalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_213_RadChartBase_Behaviors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Behaviors;
        }
        private object get_214_ChartBehavior_Chart(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)instance;
            return that.Chart;
        }
        private object get_215_RadCartesianChart_Indicators(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Indicators;
        }
        private object get_216_IndicatorBase_DataPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            return that.DataPoints;
        }
        private object get_217_CategoricalDataPoint_Value(object instance)
        {
            var that = (global::Telerik.Charting.CategoricalDataPoint)instance;
            return that.Value;
        }
        private void set_217_CategoricalDataPoint_Value(object instance, object Value)
        {
            var that = (global::Telerik.Charting.CategoricalDataPoint)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_218_CategoricalDataPointBase_Category(object instance)
        {
            var that = (global::Telerik.Charting.CategoricalDataPointBase)instance;
            return that.Category;
        }
        private void set_218_CategoricalDataPointBase_Category(object instance, object Value)
        {
            var that = (global::Telerik.Charting.CategoricalDataPointBase)instance;
            that.Category = (global::System.Object)Value;
        }
        private object get_219_DataPoint_Label(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.Label;
        }
        private void set_219_DataPoint_Label(object instance, object Value)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            that.Label = (global::System.Object)Value;
        }
        private object get_220_DataPoint_DataItem(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.DataItem;
        }
        private object get_221_DataPoint_IsSelected(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.IsSelected;
        }
        private void set_221_DataPoint_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_222_Node_Presenter(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Presenter;
        }
        private object get_223_Node_IsArrangeValid(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.IsArrangeValid;
        }
        private object get_224_Node_NodeState(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.NodeState;
        }
        private object get_225_Node_Index(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Index;
        }
        private object get_226_Node_CollectionIndex(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.CollectionIndex;
        }
        private object get_227_Node_IsTreeLoaded(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.IsTreeLoaded;
        }
        private object get_228_Node_LayoutSlot(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.LayoutSlot;
        }
        private object get_229_Node_Parent(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Parent;
        }
        private object get_230_IndicatorBase_CategoryBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            return that.CategoryBinding;
        }
        private void set_230_IndicatorBase_CategoryBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            that.CategoryBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_231_RadCartesianChart_Annotations(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Annotations;
        }
        private object get_232_ChartAnnotation_ClipToPlotArea(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotation)instance;
            return that.ClipToPlotArea;
        }
        private void set_232_ChartAnnotation_ClipToPlotArea(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotation)instance;
            that.ClipToPlotArea = (global::System.Boolean)Value;
        }
        private object get_233_RadCartesianChart_Grid(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Grid;
        }
        private void set_233_RadCartesianChart_Grid(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.Grid = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)Value;
        }
        private object get_234_RadChartBase_Zoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Zoom;
        }
        private void set_234_RadChartBase_Zoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.Zoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_235_RadChartBase_MaxZoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.MaxZoom;
        }
        private void set_235_RadChartBase_MaxZoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.MaxZoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_236_RadChartBase_MinZoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.MinZoom;
        }
        private void set_236_RadChartBase_MinZoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.MinZoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_237_RadChartBase_PlotOrigin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotOrigin;
        }
        private object get_238_RadChartBase_PlotAreaClip(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotAreaClip;
        }
        private object get_239_RadChartBase_ScrollOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.ScrollOffset;
        }
        private void set_239_RadChartBase_ScrollOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.ScrollOffset = (global::Windows.Foundation.Point)Value;
        }
        private object get_240_RadChartBase_SeriesProvider(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SeriesProvider;
        }
        private void set_240_RadChartBase_SeriesProvider(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SeriesProvider = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider)Value;
        }
        private object get_241_RadChartBase_ClipToBounds(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.ClipToBounds;
        }
        private void set_241_RadChartBase_ClipToBounds(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.ClipToBounds = (global::System.Boolean)Value;
        }
        private object get_242_RadChartBase_EmptyContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.EmptyContent;
        }
        private void set_242_RadChartBase_EmptyContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.EmptyContent = (global::System.Object)Value;
        }
        private object get_243_RadChartBase_EmptyContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.EmptyContentTemplate;
        }
        private void set_243_RadChartBase_EmptyContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.EmptyContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_244_RadChartBase_PlotAreaStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotAreaStyle;
        }
        private void set_244_RadChartBase_PlotAreaStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.PlotAreaStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_245_RadChartBase_Palette(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Palette;
        }
        private void set_245_RadChartBase_Palette(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.Palette = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)Value;
        }
        private object get_246_RadChartBase_PaletteName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PaletteName;
        }
        private void set_246_RadChartBase_PaletteName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.PaletteName = (global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName)Value;
        }
        private object get_247_RadChartBase_SelectionPalette(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SelectionPalette;
        }
        private void set_247_RadChartBase_SelectionPalette(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SelectionPalette = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)Value;
        }
        private object get_248_RadChartBase_SelectionPaletteName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SelectionPaletteName;
        }
        private void set_248_RadChartBase_SelectionPaletteName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SelectionPaletteName = (global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName)Value;
        }
        private object get_249_LinearAxis_MajorStep(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.LinearAxis)instance;
            return that.MajorStep;
        }
        private void set_249_LinearAxis_MajorStep(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.LinearAxis)instance;
            that.MajorStep = (global::System.Double)Value;
        }
        private object get_250_NumericalAxis_Minimum(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.Minimum;
        }
        private void set_250_NumericalAxis_Minimum(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_251_NumericalAxis_Maximum(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.Maximum;
        }
        private void set_251_NumericalAxis_Maximum(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_252_NumericalAxis_RangeExtendDirection(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.RangeExtendDirection;
        }
        private void set_252_NumericalAxis_RangeExtendDirection(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.RangeExtendDirection = (global::Telerik.Charting.NumericalAxisRangeExtendDirection)Value;
        }
        private object get_253_NumericalAxis_DesiredTickCount(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.DesiredTickCount;
        }
        private void set_253_NumericalAxis_DesiredTickCount(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.DesiredTickCount = (global::System.Int32)Value;
        }
        private object get_254_NumericalAxis_ActualRange(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.ActualRange;
        }
        private object get_255_CartesianAxis_HorizontalLocation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            return that.HorizontalLocation;
        }
        private void set_255_CartesianAxis_HorizontalLocation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            that.HorizontalLocation = (global::Telerik.Charting.AxisHorizontalLocation)Value;
        }
        private object get_256_CartesianAxis_VerticalLocation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            return that.VerticalLocation;
        }
        private void set_256_CartesianAxis_VerticalLocation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            that.VerticalLocation = (global::Telerik.Charting.AxisVerticalLocation)Value;
        }
        private object get_257_Axis_LabelFormatter(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFormatter;
        }
        private void set_257_Axis_LabelFormatter(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFormatter = (global::Telerik.Charting.IContentFormatter)Value;
        }
        private object get_258_Axis_LabelRotationAngle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelRotationAngle;
        }
        private void set_258_Axis_LabelRotationAngle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelRotationAngle = (global::System.Double)Value;
        }
        private object get_259_Axis_LineStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LineStyle;
        }
        private void set_259_Axis_LineStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_260_Axis_LastLabelVisibility(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LastLabelVisibility;
        }
        private void set_260_Axis_LastLabelVisibility(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LastLabelVisibility = (global::Telerik.Charting.AxisLastLabelVisibility)Value;
        }
        private object get_261_Axis_LabelFormat(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFormat;
        }
        private void set_261_Axis_LabelFormat(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFormat = (global::System.String)Value;
        }
        private object get_262_Axis_MajorTickOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickOffset;
        }
        private void set_262_Axis_MajorTickOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickOffset = (global::System.Int32)Value;
        }
        private object get_263_Axis_LabelOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelOffset;
        }
        private void set_263_Axis_LabelOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelOffset = (global::System.Int32)Value;
        }
        private object get_264_Axis_ShowLabels(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.ShowLabels;
        }
        private void set_264_Axis_ShowLabels(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_265_Axis_LabelFitMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFitMode;
        }
        private void set_265_Axis_LabelFitMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFitMode = (global::Telerik.Charting.AxisLabelFitMode)Value;
        }
        private object get_266_Axis_Title(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.Title;
        }
        private void set_266_Axis_Title(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.Title = (global::System.Object)Value;
        }
        private object get_267_Axis_LabelTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelTemplate;
        }
        private void set_267_Axis_LabelTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_268_Axis_LabelTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelTemplateSelector;
        }
        private void set_268_Axis_LabelTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_269_Axis_LabelStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelStyle;
        }
        private void set_269_Axis_LabelStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_270_Axis_TitleTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.TitleTemplate;
        }
        private void set_270_Axis_TitleTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.TitleTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_271_Axis_MajorTickTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickTemplate;
        }
        private void set_271_Axis_MajorTickTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_272_Axis_MajorTickStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickStyle;
        }
        private void set_272_Axis_MajorTickStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_273_Axis_TickThickness(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.TickThickness;
        }
        private void set_273_Axis_TickThickness(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.TickThickness = (global::System.Double)Value;
        }
        private object get_274_Axis_LabelInterval(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelInterval;
        }
        private void set_274_Axis_LabelInterval(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelInterval = (global::System.Int32)Value;
        }
        private object get_275_CategoricalAxis_AutoGroup(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.AutoGroup;
        }
        private void set_275_CategoricalAxis_AutoGroup(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.AutoGroup = (global::System.Boolean)Value;
        }
        private object get_276_CategoricalAxis_MajorTickInterval(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.MajorTickInterval;
        }
        private void set_276_CategoricalAxis_MajorTickInterval(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.MajorTickInterval = (global::System.Int32)Value;
        }
        private object get_277_CategoricalAxis_PlotMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.PlotMode;
        }
        private void set_277_CategoricalAxis_PlotMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.PlotMode = (global::Telerik.Charting.AxisPlotMode)Value;
        }
        private object get_278_CategoricalAxis_GapLength(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.GapLength;
        }
        private void set_278_CategoricalAxis_GapLength(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.GapLength = (global::System.Double)Value;
        }
        private object get_279_ChartSelectionBehavior_DataPointSelectionMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior)instance;
            return that.DataPointSelectionMode;
        }
        private void set_279_ChartSelectionBehavior_DataPointSelectionMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior)instance;
            that.DataPointSelectionMode = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode)Value;
        }
        private object get_280_ChartSelectionBehavior_SeriesSelectionMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior)instance;
            return that.SeriesSelectionMode;
        }
        private void set_280_ChartSelectionBehavior_SeriesSelectionMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior)instance;
            that.SeriesSelectionMode = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode)Value;
        }
        private object get_281_ChartSelectionBehavior_TouchTargetOverhang(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior)instance;
            return that.TouchTargetOverhang;
        }
        private void set_281_ChartSelectionBehavior_TouchTargetOverhang(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior)instance;
            that.TouchTargetOverhang = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_282_ChartSelectionBehavior_SelectedPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior)instance;
            return that.SelectedPoints;
        }
        private object get_283_ChartSelectionBehavior_SelectedSeries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior)instance;
            return that.SelectedSeries;
        }
        private object get_284_CategoricalSeriesBase_DataPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            return that.DataPoints;
        }
        private object get_285_CategoricalSeriesBase_CategoryBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            return that.CategoryBinding;
        }
        private void set_285_CategoricalSeriesBase_CategoryBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            that.CategoryBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_286_CategoricalSeriesBase_ValueBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            return that.ValueBinding;
        }
        private void set_286_CategoricalSeriesBase_ValueBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            that.ValueBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_287_BarSeries_PaletteMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.BarSeries)instance;
            return that.PaletteMode;
        }
        private void set_287_BarSeries_PaletteMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.BarSeries)instance;
            that.PaletteMode = (global::Telerik.UI.Xaml.Controls.Chart.SeriesPaletteMode)Value;
        }
        private object get_288_BarSeries_LegendTitleBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.BarSeries)instance;
            return that.LegendTitleBinding;
        }
        private void set_288_BarSeries_LegendTitleBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.BarSeries)instance;
            that.LegendTitleBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_289_CategoricalSeries_CombineMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.CombineMode;
        }
        private void set_289_CategoricalSeries_CombineMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            that.CombineMode = (global::Telerik.Charting.ChartSeriesCombineMode)Value;
        }
        private object get_290_CategoricalSeries_StackGroupKey(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.StackGroupKey;
        }
        private void set_290_CategoricalSeries_StackGroupKey(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            that.StackGroupKey = (global::System.Object)Value;
        }
        private object get_291_PropertyNameDataPointBinding_PropertyName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding)instance;
            return that.PropertyName;
        }
        private void set_291_PropertyNameDataPointBinding_PropertyName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding)instance;
            that.PropertyName = (global::System.String)Value;
        }
        private object get_292_ChartAnnotationLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Format;
        }
        private void set_292_ChartAnnotationLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_293_ChartAnnotationLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Template;
        }
        private void set_293_ChartAnnotationLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_294_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_294_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_295_ChartAnnotationLabelDefinition_Location(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Location;
        }
        private void set_295_ChartAnnotationLabelDefinition_Location(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Location = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation)Value;
        }
        private object get_296_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_296_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_297_ChartAnnotationLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_297_ChartAnnotationLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_298_ChartAnnotationLabelDefinition_HorizontalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalOffset;
        }
        private void set_298_ChartAnnotationLabelDefinition_HorizontalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalOffset = (global::System.Double)Value;
        }
        private object get_299_ChartAnnotationLabelDefinition_VerticalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalOffset;
        }
        private void set_299_ChartAnnotationLabelDefinition_VerticalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalOffset = (global::System.Double)Value;
        }
        private object get_300_ChartPalette_Name(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.Name;
        }
        private void set_300_ChartPalette_Name(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_301_ChartPalette_FillEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.FillEntries;
        }
        private void set_301_ChartPalette_FillEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.FillEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_302_PaletteEntryCollection_Brushes(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)instance;
            return that.Brushes;
        }
        private object get_303_ChartPalette_SpecialFillEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.SpecialFillEntries;
        }
        private void set_303_ChartPalette_SpecialFillEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.SpecialFillEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_304_ChartPalette_StrokeEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.StrokeEntries;
        }
        private void set_304_ChartPalette_StrokeEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.StrokeEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_305_ChartPalette_SpecialStrokeEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.SpecialStrokeEntries;
        }
        private void set_305_ChartPalette_SpecialStrokeEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.SpecialStrokeEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_306_HighlightStyle_FontFamily(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontFamily;
        }
        private void set_306_HighlightStyle_FontFamily(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_307_HighlightStyle_FontWeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontWeight;
        }
        private void set_307_HighlightStyle_FontWeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontWeight = (global::Telerik.UI.Xaml.Controls.Input.FontWeightName)Value;
        }
        private object get_308_HighlightStyle_FontStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontStyle;
        }
        private void set_308_HighlightStyle_FontStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_309_HighlightStyle_Foreground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.Foreground;
        }
        private void set_309_HighlightStyle_Foreground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_310_HighlightStyle_FontSize(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontSize;
        }
        private void set_310_HighlightStyle_FontSize(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_311_CalendarCellStyle_ContentStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.ContentStyle;
        }
        private void set_311_CalendarCellStyle_ContentStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.ContentStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_312_CalendarCellStyle_DecorationStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.DecorationStyle;
        }
        private void set_312_CalendarCellStyle_DecorationStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.DecorationStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_313_RadRadialMenu_Items(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.Items;
        }
        private object get_314_RadialMenuItem_ChildItems(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ChildItems;
        }
        private object get_315_RadialMenuItem_ToolTipContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ToolTipContent;
        }
        private void set_315_RadialMenuItem_ToolTipContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.ToolTipContent = (global::System.Object)Value;
        }
        private object get_316_RadialMenuItem_CommandParameter(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.CommandParameter;
        }
        private void set_316_RadialMenuItem_CommandParameter(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_317_RadialMenuItem_IsEnabled(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IsEnabled;
        }
        private void set_317_RadialMenuItem_IsEnabled(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_318_RadialMenuItem_Command(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Command;
        }
        private void set_318_RadialMenuItem_Command(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_319_RadialMenuItem_ParentItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ParentItem;
        }
        private object get_320_RadialMenuItem_IsSelected(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IsSelected;
        }
        private void set_320_RadialMenuItem_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_321_RadialMenuItem_GroupName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.GroupName;
        }
        private void set_321_RadialMenuItem_GroupName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.GroupName = (global::System.String)Value;
        }
        private object get_322_RadialMenuItem_Selectable(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Selectable;
        }
        private void set_322_RadialMenuItem_Selectable(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Selectable = (global::System.Boolean)Value;
        }
        private object get_323_RadialMenuItem_Deselectable(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Deselectable;
        }
        private void set_323_RadialMenuItem_Deselectable(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Deselectable = (global::System.Boolean)Value;
        }
        private object get_324_RadialMenuItem_Header(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.Header;
        }
        private void set_324_RadialMenuItem_Header(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_325_RadialMenuItem_IconContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.IconContent;
        }
        private void set_325_RadialMenuItem_IconContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.IconContent = (global::System.Object)Value;
        }
        private object get_326_RadialMenuItem_ContentSectorBackground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            return that.ContentSectorBackground;
        }
        private void set_326_RadialMenuItem_ContentSectorBackground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem)instance;
            that.ContentSectorBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_327_RadRadialMenu_ShowToolTip(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.ShowToolTip;
        }
        private void set_327_RadRadialMenu_ShowToolTip(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.ShowToolTip = (global::System.Boolean)Value;
        }
        private object get_328_RadRadialMenu_IsOpen(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.IsOpen;
        }
        private void set_328_RadRadialMenu_IsOpen(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_329_RadRadialMenu_StartAngle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.StartAngle;
        }
        private void set_329_RadRadialMenu_StartAngle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_330_RadRadialMenu_InnerNavigationRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.InnerNavigationRadiusFactor;
        }
        private void set_330_RadRadialMenu_InnerNavigationRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.InnerNavigationRadiusFactor = (global::System.Double)Value;
        }
        private object get_331_RadRadialMenu_InnerRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.InnerRadiusFactor;
        }
        private void set_331_RadRadialMenu_InnerRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.InnerRadiusFactor = (global::System.Double)Value;
        }
        private object get_332_RadRadialMenu_OuterRadiusFactor(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.OuterRadiusFactor;
        }
        private void set_332_RadRadialMenu_OuterRadiusFactor(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.OuterRadiusFactor = (global::System.Double)Value;
        }
        private object get_333_RadRadialMenu_ContentMenuBackgroundStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.ContentMenuBackgroundStyle;
        }
        private void set_333_RadRadialMenu_ContentMenuBackgroundStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.ContentMenuBackgroundStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_334_RadRadialMenu_NavigationMenuBackgroundStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.NavigationMenuBackgroundStyle;
        }
        private void set_334_RadRadialMenu_NavigationMenuBackgroundStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            that.NavigationMenuBackgroundStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_335_RadRadialMenu_CommandService(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.CommandService;
        }
        private object get_336_RadRadialMenu_Commands(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.Commands;
        }
        private object get_337_AttachableObject_Owner(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>)instance;
            return that.Owner;
        }
        private object get_338_RadRadialMenu_TargetElement(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu)instance;
            return that.TargetElement;
        }
        private object get_339_RadialMenuTriggerBehavior_AttachTriggers(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior)instance;
            return that.AttachTriggers;
        }
        private void set_339_RadialMenuTriggerBehavior_AttachTriggers(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior)instance;
            that.AttachTriggers = (global::Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers)Value;
        }
        private object get_340_AttachableObject_Owner(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.AttachableObject<global::Windows.UI.Xaml.FrameworkElement>)instance;
            return that.Owner;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember xamlMember = null;
            global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AutoGenerateColumns":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AutoGenerateColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_RadDataGrid_AutoGenerateColumns;
                xamlMember.Setter = set_0_RadDataGrid_AutoGenerateColumns;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.UserGroupMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "UserGroupMode", "Telerik.UI.Xaml.Controls.Grid.DataGridUserGroupMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_RadDataGrid_UserGroupMode;
                xamlMember.Setter = set_1_RadDataGrid_UserGroupMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.Columns":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Columns", "Telerik.UI.Xaml.Controls.Grid.DataGridColumnCollection");
                xamlMember.Getter = get_2_RadDataGrid_Columns;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CellDecorationStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CellDecorationStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_DataGridColumn_CellDecorationStyle;
                xamlMember.Setter = set_3_DataGridColumn_CellDecorationStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CellDecorationStyleSelector":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CellDecorationStyleSelector", "Windows.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_DataGridColumn_CellDecorationStyleSelector;
                xamlMember.Setter = set_4_DataGridColumn_CellDecorationStyleSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.Name":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_DataGridColumn_Name;
                xamlMember.Setter = set_5_DataGridColumn_Name;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CanUserEdit":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CanUserEdit", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_DataGridColumn_CanUserEdit;
                xamlMember.Setter = set_6_DataGridColumn_CanUserEdit;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CanUserFilter":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CanUserFilter", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_DataGridColumn_CanUserFilter;
                xamlMember.Setter = set_7_DataGridColumn_CanUserFilter;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CanUserReorder":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CanUserReorder", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_DataGridColumn_CanUserReorder;
                xamlMember.Setter = set_8_DataGridColumn_CanUserReorder;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CanUserGroup":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CanUserGroup", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_DataGridColumn_CanUserGroup;
                xamlMember.Setter = set_9_DataGridColumn_CanUserGroup;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.CanUserSort":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CanUserSort", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_DataGridColumn_CanUserSort;
                xamlMember.Setter = set_10_DataGridColumn_CanUserSort;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.HeaderStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_DataGridColumn_HeaderStyle;
                xamlMember.Setter = set_11_DataGridColumn_HeaderStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.SizeMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SizeMode", "Telerik.UI.Xaml.Controls.Grid.DataGridColumnSizeMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_DataGridColumn_SizeMode;
                xamlMember.Setter = set_12_DataGridColumn_SizeMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.Width":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_DataGridColumn_Width;
                xamlMember.Setter = set_13_DataGridColumn_Width;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.ActualWidth":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ActualWidth", "Double");
                xamlMember.Getter = get_14_DataGridColumn_ActualWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.IsAutoGenerated":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsAutoGenerated", "Boolean");
                xamlMember.Getter = get_15_DataGridColumn_IsAutoGenerated;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.Header":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_DataGridColumn_Header;
                xamlMember.Setter = set_16_DataGridColumn_Header;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridColumn.SortDirection":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SortDirection", "Telerik.UI.Xaml.Controls.Grid.SortDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_DataGridColumn_SortDirection;
                xamlMember.Setter = set_17_DataGridColumn_SortDirection;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.CurrentItem":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CurrentItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_RadDataGrid_CurrentItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.EnsureCurrentItemIntoView":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "EnsureCurrentItemIntoView", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_RadDataGrid_EnsureCurrentItemIntoView;
                xamlMember.Setter = set_19_RadDataGrid_EnsureCurrentItemIntoView;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.IsSynchronizedWithCurrentItem":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsSynchronizedWithCurrentItem", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_RadDataGrid_IsSynchronizedWithCurrentItem;
                xamlMember.Setter = set_20_RadDataGrid_IsSynchronizedWithCurrentItem;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.ItemsSource":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_RadDataGrid_ItemsSource;
                xamlMember.Setter = set_21_RadDataGrid_ItemsSource;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.IncrementalLoadingMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IncrementalLoadingMode", "Telerik.Data.Core.BatchLoadingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_RadDataGrid_IncrementalLoadingMode;
                xamlMember.Setter = set_22_RadDataGrid_IncrementalLoadingMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SortDescriptors":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SortDescriptors", "Telerik.UI.Xaml.Controls.Grid.SortDescriptorCollection");
                xamlMember.Getter = get_23_RadDataGrid_SortDescriptors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor.SortOrder":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.OrderedDescriptor");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SortOrder", "Telerik.Data.Core.SortOrder");
                xamlMember.Getter = get_24_OrderedDescriptor_SortOrder;
                xamlMember.Setter = set_24_OrderedDescriptor_SortOrder;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupDescriptors":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GroupDescriptors", "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorCollection");
                xamlMember.Getter = get_25_RadDataGrid_GroupDescriptors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase.DisplayContent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DisplayContent", "Object");
                xamlMember.Getter = get_26_GroupDescriptorBase_DisplayContent;
                xamlMember.Setter = set_26_GroupDescriptorBase_DisplayContent;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.FilterDescriptors":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "FilterDescriptors", "Telerik.UI.Xaml.Controls.Grid.FilterDescriptorCollection");
                xamlMember.Getter = get_27_RadDataGrid_FilterDescriptors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AggregateDescriptors":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AggregateDescriptors", "Telerik.UI.Xaml.Controls.Grid.AggregateDescriptorCollection");
                xamlMember.Getter = get_28_RadDataGrid_AggregateDescriptors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.UserEditMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "UserEditMode", "Telerik.UI.Xaml.Controls.Grid.DataGridUserEditMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_RadDataGrid_UserEditMode;
                xamlMember.Setter = set_29_RadDataGrid_UserEditMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.RowBackground":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "RowBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_RadDataGrid_RowBackground;
                xamlMember.Setter = set_30_RadDataGrid_RowBackground;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.RowBackgroundSelector":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "RowBackgroundSelector", "Telerik.UI.Xaml.Controls.Primitives.ObjectSelector`1<Windows.UI.Xaml.Media.Brush>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_RadDataGrid_RowBackgroundSelector;
                xamlMember.Setter = set_31_RadDataGrid_RowBackgroundSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AlternateRowBackground":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AlternateRowBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_RadDataGrid_AlternateRowBackground;
                xamlMember.Setter = set_32_RadDataGrid_AlternateRowBackground;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AlternationStep":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AlternationStep", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_RadDataGrid_AlternationStep;
                xamlMember.Setter = set_33_RadDataGrid_AlternationStep;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.AlternationStartIndex":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AlternationStartIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_RadDataGrid_AlternationStartIndex;
                xamlMember.Setter = set_34_RadDataGrid_AlternationStartIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GridLinesBrush":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GridLinesBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_RadDataGrid_GridLinesBrush;
                xamlMember.Setter = set_35_RadDataGrid_GridLinesBrush;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GridLinesVisibility":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GridLinesVisibility", "Telerik.UI.Xaml.Controls.Primitives.GridLinesVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_RadDataGrid_GridLinesVisibility;
                xamlMember.Setter = set_36_RadDataGrid_GridLinesVisibility;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GridLinesThickness":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GridLinesThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_RadDataGrid_GridLinesThickness;
                xamlMember.Setter = set_37_RadDataGrid_GridLinesThickness;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SelectionUnit":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectionUnit", "Telerik.UI.Xaml.Controls.Grid.DataGridSelectionUnit");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_RadDataGrid_SelectionUnit;
                xamlMember.Setter = set_38_RadDataGrid_SelectionUnit;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SelectedItem":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_RadDataGrid_SelectedItem;
                xamlMember.Setter = set_39_RadDataGrid_SelectedItem;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SelectionMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectionMode", "Telerik.UI.Xaml.Controls.Grid.DataGridSelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_RadDataGrid_SelectionMode;
                xamlMember.Setter = set_40_RadDataGrid_SelectionMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.SelectedItems":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.ObjectModel.ObservableCollection`1<Object>");
                xamlMember.Getter = get_41_RadDataGrid_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.IsBusyIndicatorEnabled":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsBusyIndicatorEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_RadDataGrid_IsBusyIndicatorEnabled;
                xamlMember.Setter = set_42_RadDataGrid_IsBusyIndicatorEnabled;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.UserFilterMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "UserFilterMode", "Telerik.UI.Xaml.Controls.Grid.DataGridUserFilterMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_RadDataGrid_UserFilterMode;
                xamlMember.Setter = set_43_RadDataGrid_UserFilterMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.UserColumnReorderMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "UserColumnReorderMode", "Telerik.UI.Xaml.Controls.Grid.DataGridUserColumnReorderMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_RadDataGrid_UserColumnReorderMode;
                xamlMember.Setter = set_44_RadDataGrid_UserColumnReorderMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.UserSortMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "UserSortMode", "Telerik.UI.Xaml.Controls.Grid.DataGridUserSortMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_RadDataGrid_UserSortMode;
                xamlMember.Setter = set_45_RadDataGrid_UserSortMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.IndentWidth":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IndentWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_RadDataGrid_IndentWidth;
                xamlMember.Setter = set_46_RadDataGrid_IndentWidth;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderDisplayMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GroupHeaderDisplayMode", "Telerik.UI.Xaml.Controls.Grid.DataGridGroupHeaderDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_RadDataGrid_GroupHeaderDisplayMode;
                xamlMember.Setter = set_47_RadDataGrid_GroupHeaderDisplayMode;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderTemplate":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GroupHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_RadDataGrid_GroupHeaderTemplate;
                xamlMember.Setter = set_48_RadDataGrid_GroupHeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderTemplateSelector":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GroupHeaderTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_RadDataGrid_GroupHeaderTemplateSelector;
                xamlMember.Setter = set_49_RadDataGrid_GroupHeaderTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GroupHeaderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_RadDataGrid_GroupHeaderStyle;
                xamlMember.Setter = set_50_RadDataGrid_GroupHeaderStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.GroupHeaderStyleSelector":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GroupHeaderStyleSelector", "Windows.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_RadDataGrid_GroupHeaderStyleSelector;
                xamlMember.Setter = set_51_RadDataGrid_GroupHeaderStyleSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.Commands":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Commands", "Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>");
                xamlMember.Getter = get_52_RadDataGrid_Commands;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>.Owner":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Grid.RadDataGrid>");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Owner", "Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember.Getter = get_53_AttachableObject_Owner;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.RowHeight":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "RowHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_RadDataGrid_RowHeight;
                xamlMember.Setter = set_54_RadDataGrid_RowHeight;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.CommandService":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CommandService", "Telerik.UI.Xaml.Controls.Grid.Commands.CommandService");
                xamlMember.Getter = get_55_RadDataGrid_CommandService;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.DragBehavior":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DragBehavior", "Telerik.UI.Xaml.Controls.Grid.DataGridDragBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_RadDataGrid_DragBehavior;
                xamlMember.Setter = set_56_RadDataGrid_DragBehavior;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.RadDataGrid.HitTestService":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.RadDataGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HitTestService", "Telerik.UI.Xaml.Controls.Grid.HitTestService");
                xamlMember.Getter = get_57_RadDataGrid_HitTestService;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_58_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn.CellContentTemplate":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CellContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_DataGridTemplateColumn_CellContentTemplate;
                xamlMember.Setter = set_59_DataGridTemplateColumn_CellContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn.CellContentTemplateSelector":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CellContentTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_DataGridTemplateColumn_CellContentTemplateSelector;
                xamlMember.Setter = set_60_DataGridTemplateColumn_CellContentTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn.SortDescriptor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SortDescriptor", "Telerik.UI.Xaml.Controls.Grid.SortDescriptorBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_DataGridTemplateColumn_SortDescriptor;
                xamlMember.Setter = set_61_DataGridTemplateColumn_SortDescriptor;
                break;
            case "Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn.GroupDescriptor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Grid.DataGridTemplateColumn");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GroupDescriptor", "Telerik.UI.Xaml.Controls.Grid.GroupDescriptorBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_DataGridTemplateColumn_GroupDescriptor;
                xamlMember.Setter = set_62_DataGridTemplateColumn_GroupDescriptor;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Map":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Map", "Esri.ArcGISRuntime.Controls.Map");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_MapView_Map;
                xamlMember.Setter = set_63_MapView_Map;
                break;
            case "Esri.ArcGISRuntime.Controls.Map.Layers":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Map");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Layers", "Esri.ArcGISRuntime.Layers.LayerCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_Map_Layers;
                xamlMember.Setter = set_64_Map_Layers;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.FullExtent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "FullExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_65_Layer_FullExtent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.Status":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Status", "Esri.ArcGISRuntime.Layers.LayerStatus");
                xamlMember.Getter = get_66_Layer_Status;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.InitializationException":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "InitializationException", "System.Exception");
                xamlMember.Getter = get_67_Layer_InitializationException;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.DefaultSpatialReference":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DefaultSpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_68_Layer_DefaultSpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.Opacity":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_Layer_Opacity;
                xamlMember.Setter = set_69_Layer_Opacity;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.IsVisible":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_Layer_IsVisible;
                xamlMember.Setter = set_70_Layer_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.DisplayName":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_Layer_DisplayName;
                xamlMember.Setter = set_71_Layer_DisplayName;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.ShowLegend":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ShowLegend", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_Layer_ShowLegend;
                xamlMember.Setter = set_72_Layer_ShowLegend;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.MinScale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_Layer_MinScale;
                xamlMember.Setter = set_73_Layer_MinScale;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.MaxScale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_Layer_MaxScale;
                xamlMember.Setter = set_74_Layer_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.ID":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ID", "String");
                xamlMember.Getter = get_75_Layer_ID;
                xamlMember.Setter = set_75_Layer_ID;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.IsNavigating":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsNavigating", "Boolean");
                xamlMember.Getter = get_76_MapView_IsNavigating;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.LocationDisplay":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LocationDisplay", "Esri.ArcGISRuntime.Location.LocationDisplay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_MapView_LocationDisplay;
                xamlMember.Setter = set_77_MapView_LocationDisplay;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MapGrid":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MapGrid", "Esri.ArcGISRuntime.Controls.MapGrid");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_MapView_MapGrid;
                xamlMember.Setter = set_78_MapView_MapGrid;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGrid.Levels":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGrid");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Levels", "Esri.ArcGISRuntime.Controls.MapGridLevelCollection");
                xamlMember.Getter = get_79_MapGrid_Levels;
                xamlMember.Setter = set_79_MapGrid_Levels;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.LineColor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LineColor", "Windows.UI.Color");
                xamlMember.Getter = get_80_MapGridLevel_LineColor;
                xamlMember.Setter = set_80_MapGridLevel_LineColor;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.LineWidth":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LineWidth", "Int32");
                xamlMember.Getter = get_81_MapGridLevel_LineWidth;
                xamlMember.Setter = set_81_MapGridLevel_LineWidth;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.LabelColor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelColor", "Windows.UI.Color");
                xamlMember.Getter = get_82_MapGridLevel_LabelColor;
                xamlMember.Setter = set_82_MapGridLevel_LabelColor;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.AreLabelsVisible":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AreLabelsVisible", "Boolean");
                xamlMember.Getter = get_83_MapGridLevel_AreLabelsVisible;
                xamlMember.Setter = set_83_MapGridLevel_AreLabelsVisible;
                break;
            case "Esri.ArcGISRuntime.Controls.MapGridLevel.AreLinesVisible":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapGridLevel");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AreLinesVisible", "Boolean");
                xamlMember.Getter = get_84_MapGridLevel_AreLinesVisible;
                xamlMember.Setter = set_84_MapGridLevel_AreLinesVisible;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Extent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Extent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_85_MapView_Extent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.SpatialReference":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_86_MapView_SpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Scale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Scale", "Double");
                xamlMember.Getter = get_87_MapView_Scale;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.UnitsPerPixel":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "UnitsPerPixel", "Double");
                xamlMember.Getter = get_88_MapView_UnitsPerPixel;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MaximumExtent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MaximumExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_MapView_MaximumExtent;
                xamlMember.Setter = set_89_MapView_MaximumExtent;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MaxScale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_MapView_MaxScale;
                xamlMember.Setter = set_90_MapView_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MinScale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_MapView_MinScale;
                xamlMember.Setter = set_91_MapView_MinScale;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.WrapAround":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "WrapAround", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_MapView_WrapAround;
                xamlMember.Setter = set_92_MapView_WrapAround;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.TimeExtent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TimeExtent", "Esri.ArcGISRuntime.Data.TimeExtent");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_MapView_TimeExtent;
                xamlMember.Setter = set_93_MapView_TimeExtent;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Rotation":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Rotation", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_MapView_Rotation;
                xamlMember.Setter = set_94_MapView_Rotation;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Editor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Editor", "Esri.ArcGISRuntime.Controls.Editor");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_MapView_Editor;
                xamlMember.Setter = set_95_MapView_Editor;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.ShowMagnifierOnTapAndHold":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ShowMagnifierOnTapAndHold", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_MapView_ShowMagnifierOnTapAndHold;
                xamlMember.Setter = set_96_MapView_ShowMagnifierOnTapAndHold;
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.Overlays":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Overlays", "Windows.UI.Xaml.Controls.UIElementCollection");
                xamlMember.Getter = get_97_MapView_Overlays;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.MapView.MapOverlayAnchor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.MapView");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MapOverlayAnchor", "Esri.ArcGISRuntime.Geometry.MapPoint");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_98_MapView_MapOverlayAnchor;
                xamlMember.Setter = set_98_MapView_MapOverlayAnchor;
                break;
            case "Esri.ArcGISRuntime.Controls.Map.InitialExtent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Map");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "InitialExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_Map_InitialExtent;
                xamlMember.Setter = set_99_Map_InitialExtent;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.ServiceUri":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ServiceUri", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_ArcGISTiledMapServiceLayer_ServiceUri;
                xamlMember.Setter = set_100_ArcGISTiledMapServiceLayer_ServiceUri;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.Token":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Token", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_ArcGISTiledMapServiceLayer_Token;
                xamlMember.Setter = set_101_ArcGISTiledMapServiceLayer_Token;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.ServiceInfo":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ServiceInfo", "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo");
                xamlMember.Getter = get_102_ArcGISTiledMapServiceLayer_ServiceInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.HttpMessageHandler":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HttpMessageHandler", "System.Net.Http.HttpMessageHandler");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_ArcGISTiledMapServiceLayer_HttpMessageHandler;
                xamlMember.Setter = set_103_ArcGISTiledMapServiceLayer_HttpMessageHandler;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.TileInfo":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TileInfo", "Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo");
                xamlMember.Getter = get_104_TiledLayer_TileInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Brightness":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Brightness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_TiledLayer_Brightness;
                xamlMember.Setter = set_105_TiledLayer_Brightness;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Contrast":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Contrast", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_TiledLayer_Contrast;
                xamlMember.Setter = set_106_TiledLayer_Contrast;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Gamma":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Gamma", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_TiledLayer_Gamma;
                xamlMember.Setter = set_107_TiledLayer_Gamma;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.XMin":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "XMin", "Double");
                xamlMember.Getter = get_108_Envelope_XMin;
                xamlMember.Setter = set_108_Envelope_XMin;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.YMin":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "YMin", "Double");
                xamlMember.Getter = get_109_Envelope_YMin;
                xamlMember.Setter = set_109_Envelope_YMin;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.XMax":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "XMax", "Double");
                xamlMember.Getter = get_110_Envelope_XMax;
                xamlMember.Setter = set_110_Envelope_XMax;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.YMax":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "YMax", "Double");
                xamlMember.Getter = get_111_Envelope_YMax;
                xamlMember.Setter = set_111_Envelope_YMax;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.GeometryType":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GeometryType", "Esri.ArcGISRuntime.Geometry.GeometryType");
                xamlMember.Getter = get_112_Envelope_GeometryType;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.ZMin":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ZMin", "Double");
                xamlMember.Getter = get_113_Envelope_ZMin;
                xamlMember.Setter = set_113_Envelope_ZMin;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.ZMax":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ZMax", "Double");
                xamlMember.Getter = get_114_Envelope_ZMax;
                xamlMember.Setter = set_114_Envelope_ZMax;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.MMin":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MMin", "Double");
                xamlMember.Getter = get_115_Envelope_MMin;
                xamlMember.Setter = set_115_Envelope_MMin;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.MMax":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MMax", "Double");
                xamlMember.Getter = get_116_Envelope_MMax;
                xamlMember.Setter = set_116_Envelope_MMax;
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.Width":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_117_Envelope_Width;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.Height":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_118_Envelope_Height;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.Extent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Extent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_119_Envelope_Extent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.HasM":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HasM", "Boolean");
                xamlMember.Getter = get_120_Envelope_HasM;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.HasZ":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HasZ", "Boolean");
                xamlMember.Getter = get_121_Envelope_HasZ;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Geometry.Envelope.IsEmpty":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsEmpty", "Boolean");
                xamlMember.Getter = get_122_Envelope_IsEmpty;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Geometry.Geometry.Dimension":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Dimension", "Int32");
                xamlMember.Getter = get_123_Geometry_Dimension;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Geometry.Geometry.SpatialReference":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_124_Geometry_SpatialReference;
                xamlMember.Setter = set_124_Geometry_SpatialReference;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.ServiceUri":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ServiceUri", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_ArcGISDynamicMapServiceLayer_ServiceUri;
                xamlMember.Setter = set_125_ArcGISDynamicMapServiceLayer_ServiceUri;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.ServiceInfo":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ServiceInfo", "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo");
                xamlMember.Getter = get_126_ArcGISDynamicMapServiceLayer_ServiceInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.VisibleLayers":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "VisibleLayers", "System.Collections.ObjectModel.ObservableCollection`1<Int32>");
                xamlMember.Getter = get_127_ArcGISDynamicMapServiceLayer_VisibleLayers;
                xamlMember.Setter = set_127_ArcGISDynamicMapServiceLayer_VisibleLayers;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.Token":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Token", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_ArcGISDynamicMapServiceLayer_Token;
                xamlMember.Setter = set_128_ArcGISDynamicMapServiceLayer_Token;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.HttpMessageHandler":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HttpMessageHandler", "System.Net.Http.HttpMessageHandler");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_ArcGISDynamicMapServiceLayer_HttpMessageHandler;
                xamlMember.Setter = set_129_ArcGISDynamicMapServiceLayer_HttpMessageHandler;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.ImageFormat":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ImageFormat", "Esri.ArcGISRuntime.ArcGISServices.ImageFormat");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_ArcGISDynamicMapServiceLayer_ImageFormat;
                xamlMember.Setter = set_130_ArcGISDynamicMapServiceLayer_ImageFormat;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.LayerDefinitions":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LayerDefinitions", "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.LayerDefinition>");
                xamlMember.Getter = get_131_ArcGISDynamicMapServiceLayer_LayerDefinitions;
                xamlMember.Setter = set_131_ArcGISDynamicMapServiceLayer_LayerDefinitions;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerDefinition.LayerID":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LayerID", "Int32");
                xamlMember.Getter = get_132_LayerDefinition_LayerID;
                xamlMember.Setter = set_132_LayerDefinition_LayerID;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerDefinition.Definition":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Definition", "String");
                xamlMember.Getter = get_133_LayerDefinition_Definition;
                xamlMember.Setter = set_133_LayerDefinition_Definition;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.LayerTimeOptions":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LayerTimeOptions", "Esri.ArcGISRuntime.Layers.LayerTimeOptionCollection");
                xamlMember.Getter = get_134_ArcGISDynamicMapServiceLayer_LayerTimeOptions;
                xamlMember.Setter = set_134_ArcGISDynamicMapServiceLayer_LayerTimeOptions;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerTimeOptions.LayerID":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerTimeOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LayerID", "Int32");
                xamlMember.Getter = get_135_LayerTimeOptions_LayerID;
                xamlMember.Setter = set_135_LayerTimeOptions_LayerID;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerTimeOptions.UseTime":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerTimeOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "UseTime", "Boolean");
                xamlMember.Getter = get_136_LayerTimeOptions_UseTime;
                xamlMember.Setter = set_136_LayerTimeOptions_UseTime;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerTimeOptions.TimeCumulative":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerTimeOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TimeCumulative", "Boolean");
                xamlMember.Getter = get_137_LayerTimeOptions_TimeCumulative;
                xamlMember.Setter = set_137_LayerTimeOptions_TimeCumulative;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerTimeOptions.TimeOffset":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerTimeOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TimeOffset", "System.Nullable`1<Double>");
                xamlMember.Getter = get_138_LayerTimeOptions_TimeOffset;
                xamlMember.Setter = set_138_LayerTimeOptions_TimeOffset;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerTimeOptions.TimeOffsetUnits":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerTimeOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TimeOffsetUnits", "Esri.ArcGISRuntime.ArcGISServices.TimeUnit");
                xamlMember.Getter = get_139_LayerTimeOptions_TimeOffsetUnits;
                xamlMember.Setter = set_139_LayerTimeOptions_TimeOffsetUnits;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.LayerDrawingOptions":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LayerDrawingOptions", "Esri.ArcGISRuntime.Layers.LayerDrawingOptionCollection");
                xamlMember.Getter = get_140_ArcGISDynamicMapServiceLayer_LayerDrawingOptions;
                xamlMember.Setter = set_140_ArcGISDynamicMapServiceLayer_LayerDrawingOptions;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerDrawingOptions.LayerID":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerDrawingOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LayerID", "Int32");
                xamlMember.Getter = get_141_LayerDrawingOptions_LayerID;
                xamlMember.Setter = set_141_LayerDrawingOptions_LayerID;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerDrawingOptions.Renderer":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerDrawingOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Renderer", "Esri.ArcGISRuntime.Symbology.Renderer");
                xamlMember.Getter = get_142_LayerDrawingOptions_Renderer;
                xamlMember.Setter = set_142_LayerDrawingOptions_Renderer;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerDrawingOptions.Opacity":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerDrawingOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_143_LayerDrawingOptions_Opacity;
                xamlMember.Setter = set_143_LayerDrawingOptions_Opacity;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerDrawingOptions.ScaleSymbols":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerDrawingOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ScaleSymbols", "Boolean");
                xamlMember.Getter = get_144_LayerDrawingOptions_ScaleSymbols;
                xamlMember.Setter = set_144_LayerDrawingOptions_ScaleSymbols;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerDrawingOptions.ShowLabels":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerDrawingOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.Getter = get_145_LayerDrawingOptions_ShowLabels;
                xamlMember.Setter = set_145_LayerDrawingOptions_ShowLabels;
                break;
            case "Esri.ArcGISRuntime.Layers.LayerDrawingOptions.LabelingInfos":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerDrawingOptions");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelingInfos", "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.DynamicLabelingInfo>");
                xamlMember.Getter = get_146_LayerDrawingOptions_LabelingInfos;
                xamlMember.Setter = set_146_LayerDrawingOptions_LabelingInfos;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLabelingInfo.LabelPlacement":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLabelingInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelPlacement", "Esri.ArcGISRuntime.ArcGISServices.LabelPlacement");
                xamlMember.Getter = get_147_DynamicLabelingInfo_LabelPlacement;
                xamlMember.Setter = set_147_DynamicLabelingInfo_LabelPlacement;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLabelingInfo.LabelExpression":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLabelingInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelExpression", "String");
                xamlMember.Getter = get_148_DynamicLabelingInfo_LabelExpression;
                xamlMember.Setter = set_148_DynamicLabelingInfo_LabelExpression;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLabelingInfo.UseCodedValues":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLabelingInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "UseCodedValues", "Boolean");
                xamlMember.Getter = get_149_DynamicLabelingInfo_UseCodedValues;
                xamlMember.Setter = set_149_DynamicLabelingInfo_UseCodedValues;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLabelingInfo.MinScale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLabelingInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.Getter = get_150_DynamicLabelingInfo_MinScale;
                xamlMember.Setter = set_150_DynamicLabelingInfo_MinScale;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLabelingInfo.MaxScale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLabelingInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.Getter = get_151_DynamicLabelingInfo_MaxScale;
                xamlMember.Setter = set_151_DynamicLabelingInfo_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLabelingInfo.Where":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLabelingInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Where", "String");
                xamlMember.Getter = get_152_DynamicLabelingInfo_Where;
                xamlMember.Setter = set_152_DynamicLabelingInfo_Where;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLabelingInfo.Symbol":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLabelingInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Symbol", "Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember.Getter = get_153_DynamicLabelingInfo_Symbol;
                xamlMember.Setter = set_153_DynamicLabelingInfo_Symbol;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.DynamicLayerInfos":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DynamicLayerInfos", "Esri.ArcGISRuntime.Layers.DynamicLayerInfoCollection");
                xamlMember.Getter = get_154_ArcGISDynamicMapServiceLayer_DynamicLayerInfos;
                xamlMember.Setter = set_154_ArcGISDynamicMapServiceLayer_DynamicLayerInfos;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayerInfo.ID":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayerInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ID", "Int32");
                xamlMember.Getter = get_155_DynamicLayerInfo_ID;
                xamlMember.Setter = set_155_DynamicLayerInfo_ID;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayerInfo.Name":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayerInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_156_DynamicLayerInfo_Name;
                xamlMember.Setter = set_156_DynamicLayerInfo_Name;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayerInfo.DefaultVisibility":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayerInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DefaultVisibility", "Boolean");
                xamlMember.Getter = get_157_DynamicLayerInfo_DefaultVisibility;
                xamlMember.Setter = set_157_DynamicLayerInfo_DefaultVisibility;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayerInfo.SubLayerIds":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayerInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SubLayerIds", "System.Collections.Generic.IList`1<Int32>");
                xamlMember.Getter = get_158_DynamicLayerInfo_SubLayerIds;
                xamlMember.Setter = set_158_DynamicLayerInfo_SubLayerIds;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayerInfo.MinScale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayerInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.Getter = get_159_DynamicLayerInfo_MinScale;
                xamlMember.Setter = set_159_DynamicLayerInfo_MinScale;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayerInfo.MaxScale":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayerInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.Getter = get_160_DynamicLayerInfo_MaxScale;
                xamlMember.Setter = set_160_DynamicLayerInfo_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayerInfo.Source":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayerInfo");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Source", "Esri.ArcGISRuntime.Layers.LayerSource");
                xamlMember.Getter = get_161_DynamicLayerInfo_Source;
                xamlMember.Setter = set_161_DynamicLayerInfo_Source;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer.GeodatabaseVersion":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISDynamicMapServiceLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GeodatabaseVersion", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_162_ArcGISDynamicMapServiceLayer_GeodatabaseVersion;
                xamlMember.Setter = set_162_ArcGISDynamicMapServiceLayer_GeodatabaseVersion;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayer.Brightness":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Brightness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_DynamicLayer_Brightness;
                xamlMember.Setter = set_163_DynamicLayer_Brightness;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayer.Contrast":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Contrast", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_DynamicLayer_Contrast;
                xamlMember.Setter = set_164_DynamicLayer_Contrast;
                break;
            case "Esri.ArcGISRuntime.Layers.DynamicLayer.Gamma":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.DynamicLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Gamma", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_DynamicLayer_Gamma;
                xamlMember.Setter = set_165_DynamicLayer_Gamma;
                break;
            case "Esri.ArcGISRuntime.Layers.GraphicsLayer.Graphics":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.GraphicsLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Graphics", "Esri.ArcGISRuntime.Layers.GraphicCollection");
                xamlMember.Getter = get_166_GraphicsLayer_Graphics;
                xamlMember.Setter = set_166_GraphicsLayer_Graphics;
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.Symbol":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Symbol", "Esri.ArcGISRuntime.Symbology.Symbol");
                xamlMember.Getter = get_167_Graphic_Symbol;
                xamlMember.Setter = set_167_Graphic_Symbol;
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.IsVisible":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_168_Graphic_IsVisible;
                xamlMember.Setter = set_168_Graphic_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.IsSelected":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_169_Graphic_IsSelected;
                xamlMember.Setter = set_169_Graphic_IsSelected;
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.ZIndex":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_170_Graphic_ZIndex;
                xamlMember.Setter = set_170_Graphic_ZIndex;
                break;
            case "Esri.ArcGISRuntime.Data.Feature.Attributes":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Data.Feature");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Attributes", "System.Collections.Generic.IDictionary`2<String, Object>");
                xamlMember.Getter = get_171_Feature_Attributes;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Data.Feature.Geometry":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Data.Feature");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Geometry", "Esri.ArcGISRuntime.Geometry.Geometry");
                xamlMember.Getter = get_172_Feature_Geometry;
                xamlMember.Setter = set_172_Feature_Geometry;
                break;
            case "Esri.ArcGISRuntime.Layers.GraphicsLayer.RenderingMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.GraphicsLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "RenderingMode", "Esri.ArcGISRuntime.Layers.GraphicsRenderingMode");
                xamlMember.Getter = get_173_GraphicsLayer_RenderingMode;
                xamlMember.Setter = set_173_GraphicsLayer_RenderingMode;
                break;
            case "Esri.ArcGISRuntime.Layers.GraphicsLayer.SelectionColor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.GraphicsLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectionColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_GraphicsLayer_SelectionColor;
                xamlMember.Setter = set_174_GraphicsLayer_SelectionColor;
                break;
            case "Esri.ArcGISRuntime.Layers.GraphicsLayer.Renderer":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.GraphicsLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Renderer", "Esri.ArcGISRuntime.Symbology.Renderer");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_GraphicsLayer_Renderer;
                xamlMember.Setter = set_175_GraphicsLayer_Renderer;
                break;
            case "Esri.ArcGISRuntime.Layers.GraphicsLayer.GraphicsSource":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.GraphicsLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GraphicsSource", "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.Layers.Graphic>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_GraphicsLayer_GraphicsSource;
                xamlMember.Setter = set_176_GraphicsLayer_GraphicsSource;
                break;
            case "Esri.ArcGISRuntime.Layers.GraphicsLayer.IsLabelingEnabled":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.GraphicsLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsLabelingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_GraphicsLayer_IsLabelingEnabled;
                xamlMember.Setter = set_177_GraphicsLayer_IsLabelingEnabled;
                break;
            case "Esri.ArcGISRuntime.Layers.GraphicsLayer.LabelClasses":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.GraphicsLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelClasses", "Esri.ArcGISRuntime.Layers.LabelClassCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_GraphicsLayer_LabelClasses;
                xamlMember.Setter = set_178_GraphicsLayer_LabelClasses;
                break;
            case "Esri.ArcGISRuntime.Layers.LabelClass.TextExpression":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LabelClass");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TextExpression", "String");
                xamlMember.Getter = get_179_LabelClass_TextExpression;
                xamlMember.Setter = set_179_LabelClass_TextExpression;
                break;
            case "Esri.ArcGISRuntime.Layers.LabelClass.Symbol":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LabelClass");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Symbol", "Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember.Getter = get_180_LabelClass_Symbol;
                xamlMember.Setter = set_180_LabelClass_Symbol;
                break;
            case "Esri.ArcGISRuntime.Layers.GraphicsLayer.SelectedItems":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.GraphicsLayer");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.Layers.Graphic>");
                xamlMember.Getter = get_181_GraphicsLayer_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Series":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Series", "Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection");
                xamlMember.Getter = get_182_RadCartesianChart_Series;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries.HorizontalAxis":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HorizontalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_CartesianSeries_HorizontalAxis;
                xamlMember.Setter = set_183_CartesianSeries_HorizontalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries.VerticalAxis":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "VerticalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_CartesianSeries_VerticalAxis;
                xamlMember.Setter = set_184_CartesianSeries_VerticalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.LegendTitle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LegendTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_PointTemplateSeries_LegendTitle;
                xamlMember.Setter = set_185_PointTemplateSeries_LegendTitle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.IsVisibleInLegend":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsVisibleInLegend", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_PointTemplateSeries_IsVisibleInLegend;
                xamlMember.Setter = set_186_PointTemplateSeries_IsVisibleInLegend;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.DefaultVisualStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_PointTemplateSeries_DefaultVisualStyle;
                xamlMember.Setter = set_187_PointTemplateSeries_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplate":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PointTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_188_PointTemplateSeries_PointTemplate;
                xamlMember.Setter = set_188_PointTemplateSeries_PointTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplateSelector":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PointTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_189_PointTemplateSeries_PointTemplateSelector;
                xamlMember.Setter = set_189_PointTemplateSeries_PointTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplates":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PointTemplates", "System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.DataTemplate>");
                xamlMember.Getter = get_190_PointTemplateSeries_PointTemplates;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.IsSelected":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_ChartSeries_IsSelected;
                xamlMember.Setter = set_191_ChartSeries_IsSelected;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.AllowSelect":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AllowSelect", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_ChartSeries_AllowSelect;
                xamlMember.Setter = set_192_ChartSeries_AllowSelect;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.PaletteIndex":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PaletteIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_193_ChartSeries_PaletteIndex;
                xamlMember.Setter = set_193_ChartSeries_PaletteIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.LabelDefinitions":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelDefinitions", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>");
                xamlMember.Getter = get_194_ChartSeries_LabelDefinitions;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.HorizontalAlignment":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_ChartSeriesLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_195_ChartSeriesLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.VerticalAlignment":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_ChartSeriesLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_196_ChartSeriesLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Template":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_ChartSeriesLabelDefinition_Template;
                xamlMember.Setter = set_197_ChartSeriesLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Binding":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Binding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_ChartSeriesLabelDefinition_Binding;
                xamlMember.Setter = set_198_ChartSeriesLabelDefinition_Binding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Format":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_199_ChartSeriesLabelDefinition_Format;
                xamlMember.Setter = set_199_ChartSeriesLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Margin":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Margin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_ChartSeriesLabelDefinition_Margin;
                xamlMember.Setter = set_200_ChartSeriesLabelDefinition_Margin;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.TemplateSelector":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_ChartSeriesLabelDefinition_TemplateSelector;
                xamlMember.Setter = set_201_ChartSeriesLabelDefinition_TemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.DefaultVisualStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_202_ChartSeriesLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_202_ChartSeriesLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Strategy":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Strategy", "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_ChartSeriesLabelDefinition_Strategy;
                xamlMember.Setter = set_203_ChartSeriesLabelDefinition_Strategy;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.IsSelectedBinding":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsSelectedBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_204_ChartSeries_IsSelectedBinding;
                xamlMember.Setter = set_204_ChartSeries_IsSelectedBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ShowLabels":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_205_ChartSeries_ShowLabels;
                xamlMember.Setter = set_205_ChartSeries_ShowLabels;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.DisplayName":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.Getter = get_206_ChartSeries_DisplayName;
                xamlMember.Setter = set_206_ChartSeries_DisplayName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ClipToPlotArea":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ClipToPlotArea", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_207_ChartSeries_ClipToPlotArea;
                xamlMember.Setter = set_207_ChartSeries_ClipToPlotArea;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ItemsSource":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_208_ChartSeries_ItemsSource;
                xamlMember.Setter = set_208_ChartSeries_ItemsSource;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter.ZIndex":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_209_ChartElementPresenter_ZIndex;
                xamlMember.Setter = set_209_ChartElementPresenter_ZIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter.Chart":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Chart", "Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember.Getter = get_210_ChartElementPresenter_Chart;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.HorizontalAxis":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HorizontalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_211_RadCartesianChart_HorizontalAxis;
                xamlMember.Setter = set_211_RadCartesianChart_HorizontalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.VerticalAxis":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "VerticalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_212_RadCartesianChart_VerticalAxis;
                xamlMember.Setter = set_212_RadCartesianChart_VerticalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Behaviors":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Behaviors", "Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection");
                xamlMember.Getter = get_213_RadChartBase_Behaviors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartBehavior.Chart":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartBehavior");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Chart", "Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember.Getter = get_214_ChartBehavior_Chart;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Indicators":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Indicators", "Telerik.UI.Xaml.Controls.Chart.IndicatorCollection");
                xamlMember.Getter = get_215_RadCartesianChart_Indicators;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.IndicatorBase.DataPoints":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.IndicatorBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DataPoints", "Telerik.Charting.DataPointCollection`1<Telerik.Charting.CategoricalDataPoint>");
                xamlMember.Getter = get_216_IndicatorBase_DataPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.CategoricalDataPoint.Value":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.CategoricalDataPoint");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.Getter = get_217_CategoricalDataPoint_Value;
                xamlMember.Setter = set_217_CategoricalDataPoint_Value;
                break;
            case "Telerik.Charting.CategoricalDataPointBase.Category":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.CategoricalDataPointBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Category", "Object");
                xamlMember.Getter = get_218_CategoricalDataPointBase_Category;
                xamlMember.Setter = set_218_CategoricalDataPointBase_Category;
                break;
            case "Telerik.Charting.DataPoint.Label":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Label", "Object");
                xamlMember.Getter = get_219_DataPoint_Label;
                xamlMember.Setter = set_219_DataPoint_Label;
                break;
            case "Telerik.Charting.DataPoint.DataItem":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DataItem", "Object");
                xamlMember.Getter = get_220_DataPoint_DataItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.DataPoint.IsSelected":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_221_DataPoint_IsSelected;
                xamlMember.Setter = set_221_DataPoint_IsSelected;
                break;
            case "Telerik.Core.Node.Presenter":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Presenter", "Telerik.Core.IElementPresenter");
                xamlMember.Getter = get_222_Node_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.IsArrangeValid":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsArrangeValid", "Boolean");
                xamlMember.Getter = get_223_Node_IsArrangeValid;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.NodeState":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "NodeState", "Telerik.Core.NodeState");
                xamlMember.Getter = get_224_Node_NodeState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.Index":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Index", "Int32");
                xamlMember.Getter = get_225_Node_Index;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.CollectionIndex":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CollectionIndex", "Int32");
                xamlMember.Getter = get_226_Node_CollectionIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.IsTreeLoaded":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsTreeLoaded", "Boolean");
                xamlMember.Getter = get_227_Node_IsTreeLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.LayoutSlot":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LayoutSlot", "Telerik.Core.RadRect");
                xamlMember.Getter = get_228_Node_LayoutSlot;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.Parent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Parent", "Telerik.Core.Element");
                xamlMember.Getter = get_229_Node_Parent;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.IndicatorBase.CategoryBinding":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.IndicatorBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CategoryBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_230_IndicatorBase_CategoryBinding;
                xamlMember.Setter = set_230_IndicatorBase_CategoryBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Annotations":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Annotations", "Telerik.UI.Xaml.Controls.Chart.CartesianAnnotationCollection");
                xamlMember.Getter = get_231_RadCartesianChart_Annotations;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotation.ClipToPlotArea":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotation");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ClipToPlotArea", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_232_ChartAnnotation_ClipToPlotArea;
                xamlMember.Setter = set_232_ChartAnnotation_ClipToPlotArea;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Grid":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Grid", "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember.Getter = get_233_RadCartesianChart_Grid;
                xamlMember.Setter = set_233_RadCartesianChart_Grid;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Zoom":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Zoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_234_RadChartBase_Zoom;
                xamlMember.Setter = set_234_RadChartBase_Zoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.MaxZoom":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MaxZoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_235_RadChartBase_MaxZoom;
                xamlMember.Setter = set_235_RadChartBase_MaxZoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.MinZoom":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MinZoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_236_RadChartBase_MinZoom;
                xamlMember.Setter = set_236_RadChartBase_MinZoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotOrigin":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PlotOrigin", "Windows.Foundation.Point");
                xamlMember.Getter = get_237_RadChartBase_PlotOrigin;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotAreaClip":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PlotAreaClip", "Telerik.Core.RadRect");
                xamlMember.Getter = get_238_RadChartBase_PlotAreaClip;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.ScrollOffset":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ScrollOffset", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_239_RadChartBase_ScrollOffset;
                xamlMember.Setter = set_239_RadChartBase_ScrollOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SeriesProvider":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SeriesProvider", "Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_240_RadChartBase_SeriesProvider;
                xamlMember.Setter = set_240_RadChartBase_SeriesProvider;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.ClipToBounds":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ClipToBounds", "Boolean");
                xamlMember.Getter = get_241_RadChartBase_ClipToBounds;
                xamlMember.Setter = set_241_RadChartBase_ClipToBounds;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.EmptyContent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "EmptyContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_242_RadChartBase_EmptyContent;
                xamlMember.Setter = set_242_RadChartBase_EmptyContent;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.EmptyContentTemplate":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "EmptyContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_243_RadChartBase_EmptyContentTemplate;
                xamlMember.Setter = set_243_RadChartBase_EmptyContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotAreaStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PlotAreaStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_244_RadChartBase_PlotAreaStyle;
                xamlMember.Setter = set_244_RadChartBase_PlotAreaStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Palette":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Palette", "Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_245_RadChartBase_Palette;
                xamlMember.Setter = set_245_RadChartBase_Palette;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PaletteName":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PaletteName", "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_246_RadChartBase_PaletteName;
                xamlMember.Setter = set_246_RadChartBase_PaletteName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SelectionPalette":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectionPalette", "Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_247_RadChartBase_SelectionPalette;
                xamlMember.Setter = set_247_RadChartBase_SelectionPalette;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SelectionPaletteName":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectionPaletteName", "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_248_RadChartBase_SelectionPaletteName;
                xamlMember.Setter = set_248_RadChartBase_SelectionPaletteName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.LinearAxis.MajorStep":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.LinearAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MajorStep", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_249_LinearAxis_MajorStep;
                xamlMember.Setter = set_249_LinearAxis_MajorStep;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.Minimum":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_250_NumericalAxis_Minimum;
                xamlMember.Setter = set_250_NumericalAxis_Minimum;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.Maximum":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_251_NumericalAxis_Maximum;
                xamlMember.Setter = set_251_NumericalAxis_Maximum;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.RangeExtendDirection":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "RangeExtendDirection", "Telerik.Charting.NumericalAxisRangeExtendDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_252_NumericalAxis_RangeExtendDirection;
                xamlMember.Setter = set_252_NumericalAxis_RangeExtendDirection;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.DesiredTickCount":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DesiredTickCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_253_NumericalAxis_DesiredTickCount;
                xamlMember.Setter = set_253_NumericalAxis_DesiredTickCount;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.ActualRange":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ActualRange", "Telerik.Core.ValueRange`1<Double>");
                xamlMember.Getter = get_254_NumericalAxis_ActualRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianAxis.HorizontalLocation":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HorizontalLocation", "Telerik.Charting.AxisHorizontalLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_255_CartesianAxis_HorizontalLocation;
                xamlMember.Setter = set_255_CartesianAxis_HorizontalLocation;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianAxis.VerticalLocation":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "VerticalLocation", "Telerik.Charting.AxisVerticalLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_256_CartesianAxis_VerticalLocation;
                xamlMember.Setter = set_256_CartesianAxis_VerticalLocation;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFormatter":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelFormatter", "Telerik.Charting.IContentFormatter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_257_Axis_LabelFormatter;
                xamlMember.Setter = set_257_Axis_LabelFormatter;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelRotationAngle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelRotationAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_258_Axis_LabelRotationAngle;
                xamlMember.Setter = set_258_Axis_LabelRotationAngle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LineStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_259_Axis_LineStyle;
                xamlMember.Setter = set_259_Axis_LineStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LastLabelVisibility":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LastLabelVisibility", "Telerik.Charting.AxisLastLabelVisibility");
                xamlMember.Getter = get_260_Axis_LastLabelVisibility;
                xamlMember.Setter = set_260_Axis_LastLabelVisibility;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFormat":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_261_Axis_LabelFormat;
                xamlMember.Setter = set_261_Axis_LabelFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickOffset":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MajorTickOffset", "Int32");
                xamlMember.Getter = get_262_Axis_MajorTickOffset;
                xamlMember.Setter = set_262_Axis_MajorTickOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelOffset":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelOffset", "Int32");
                xamlMember.Getter = get_263_Axis_LabelOffset;
                xamlMember.Setter = set_263_Axis_LabelOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.ShowLabels":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_264_Axis_ShowLabels;
                xamlMember.Setter = set_264_Axis_ShowLabels;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFitMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelFitMode", "Telerik.Charting.AxisLabelFitMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_265_Axis_LabelFitMode;
                xamlMember.Setter = set_265_Axis_LabelFitMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.Title":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Title", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_266_Axis_Title;
                xamlMember.Setter = set_266_Axis_Title;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelTemplate":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_267_Axis_LabelTemplate;
                xamlMember.Setter = set_267_Axis_LabelTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelTemplateSelector":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_268_Axis_LabelTemplateSelector;
                xamlMember.Setter = set_268_Axis_LabelTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_269_Axis_LabelStyle;
                xamlMember.Setter = set_269_Axis_LabelStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.TitleTemplate":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TitleTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_270_Axis_TitleTemplate;
                xamlMember.Setter = set_270_Axis_TitleTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickTemplate":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MajorTickTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_271_Axis_MajorTickTemplate;
                xamlMember.Setter = set_271_Axis_MajorTickTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MajorTickStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_272_Axis_MajorTickStyle;
                xamlMember.Setter = set_272_Axis_MajorTickStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.TickThickness":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TickThickness", "Double");
                xamlMember.Getter = get_273_Axis_TickThickness;
                xamlMember.Setter = set_273_Axis_TickThickness;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelInterval":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LabelInterval", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_274_Axis_LabelInterval;
                xamlMember.Setter = set_274_Axis_LabelInterval;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.AutoGroup":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AutoGroup", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_275_CategoricalAxis_AutoGroup;
                xamlMember.Setter = set_275_CategoricalAxis_AutoGroup;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.MajorTickInterval":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "MajorTickInterval", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_276_CategoricalAxis_MajorTickInterval;
                xamlMember.Setter = set_276_CategoricalAxis_MajorTickInterval;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.PlotMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PlotMode", "Telerik.Charting.AxisPlotMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_277_CategoricalAxis_PlotMode;
                xamlMember.Setter = set_277_CategoricalAxis_PlotMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.GapLength":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GapLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_278_CategoricalAxis_GapLength;
                xamlMember.Setter = set_278_CategoricalAxis_GapLength;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior.DataPointSelectionMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DataPointSelectionMode", "Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode");
                xamlMember.Getter = get_279_ChartSelectionBehavior_DataPointSelectionMode;
                xamlMember.Setter = set_279_ChartSelectionBehavior_DataPointSelectionMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior.SeriesSelectionMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SeriesSelectionMode", "Telerik.UI.Xaml.Controls.Chart.ChartSelectionMode");
                xamlMember.Getter = get_280_ChartSelectionBehavior_SeriesSelectionMode;
                xamlMember.Setter = set_280_ChartSelectionBehavior_SeriesSelectionMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior.TouchTargetOverhang":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TouchTargetOverhang", "Windows.UI.Xaml.Thickness");
                xamlMember.Getter = get_281_ChartSelectionBehavior_TouchTargetOverhang;
                xamlMember.Setter = set_281_ChartSelectionBehavior_TouchTargetOverhang;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior.SelectedPoints":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectedPoints", "System.Collections.Generic.IEnumerable`1<Telerik.Charting.DataPoint>");
                xamlMember.Getter = get_282_ChartSelectionBehavior_SelectedPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior.SelectedSeries":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSelectionBehavior");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SelectedSeries", "System.Collections.Generic.IEnumerable`1<Telerik.UI.Xaml.Controls.Chart.ChartSeries>");
                xamlMember.Getter = get_283_ChartSelectionBehavior_SelectedSeries;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DataPoints", "Telerik.Charting.DataPointCollection`1<Telerik.Charting.CategoricalDataPoint>");
                xamlMember.Getter = get_284_CategoricalSeriesBase_DataPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.CategoryBinding":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CategoryBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_285_CategoricalSeriesBase_CategoryBinding;
                xamlMember.Setter = set_285_CategoricalSeriesBase_CategoryBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.ValueBinding":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ValueBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_286_CategoricalSeriesBase_ValueBinding;
                xamlMember.Setter = set_286_CategoricalSeriesBase_ValueBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.BarSeries.PaletteMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.BarSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PaletteMode", "Telerik.UI.Xaml.Controls.Chart.SeriesPaletteMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_287_BarSeries_PaletteMode;
                xamlMember.Setter = set_287_BarSeries_PaletteMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.BarSeries.LegendTitleBinding":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.BarSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "LegendTitleBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_288_BarSeries_LegendTitleBinding;
                xamlMember.Setter = set_288_BarSeries_LegendTitleBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.CombineMode":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CombineMode", "Telerik.Charting.ChartSeriesCombineMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_289_CategoricalSeries_CombineMode;
                xamlMember.Setter = set_289_CategoricalSeries_CombineMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.StackGroupKey":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "StackGroupKey", "Object");
                xamlMember.Getter = get_290_CategoricalSeries_StackGroupKey;
                xamlMember.Setter = set_290_CategoricalSeries_StackGroupKey;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding.PropertyName":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "PropertyName", "String");
                xamlMember.Getter = get_291_PropertyNameDataPointBinding_PropertyName;
                xamlMember.Setter = set_291_PropertyNameDataPointBinding_PropertyName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Format":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_292_ChartAnnotationLabelDefinition_Format;
                xamlMember.Setter = set_292_ChartAnnotationLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Template":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_293_ChartAnnotationLabelDefinition_Template;
                xamlMember.Setter = set_293_ChartAnnotationLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.DefaultVisualStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_294_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_294_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Location":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Location", "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_295_ChartAnnotationLabelDefinition_Location;
                xamlMember.Setter = set_295_ChartAnnotationLabelDefinition_Location;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalAlignment":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_296_ChartAnnotationLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_296_ChartAnnotationLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalAlignment":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_297_ChartAnnotationLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_297_ChartAnnotationLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalOffset":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_298_ChartAnnotationLabelDefinition_HorizontalOffset;
                xamlMember.Setter = set_298_ChartAnnotationLabelDefinition_HorizontalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalOffset":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_299_ChartAnnotationLabelDefinition_VerticalOffset;
                xamlMember.Setter = set_299_ChartAnnotationLabelDefinition_VerticalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.Name":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_300_ChartPalette_Name;
                xamlMember.Setter = set_300_ChartPalette_Name;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.FillEntries":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "FillEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_301_ChartPalette_FillEntries;
                xamlMember.Setter = set_301_ChartPalette_FillEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.Brushes":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Brushes", "System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>");
                xamlMember.Getter = get_302_PaletteEntryCollection_Brushes;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.SpecialFillEntries":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SpecialFillEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_303_ChartPalette_SpecialFillEntries;
                xamlMember.Setter = set_303_ChartPalette_SpecialFillEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.StrokeEntries":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "StrokeEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_304_ChartPalette_StrokeEntries;
                xamlMember.Setter = set_304_ChartPalette_StrokeEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.SpecialStrokeEntries":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "SpecialStrokeEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_305_ChartPalette_SpecialStrokeEntries;
                xamlMember.Setter = set_305_ChartPalette_SpecialStrokeEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontFamily":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_306_HighlightStyle_FontFamily;
                xamlMember.Setter = set_306_HighlightStyle_FontFamily;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontWeight":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "FontWeight", "Telerik.UI.Xaml.Controls.Input.FontWeightName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_307_HighlightStyle_FontWeight;
                xamlMember.Setter = set_307_HighlightStyle_FontWeight;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_308_HighlightStyle_FontStyle;
                xamlMember.Setter = set_308_HighlightStyle_FontStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.Foreground":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_309_HighlightStyle_Foreground;
                xamlMember.Setter = set_309_HighlightStyle_Foreground;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontSize":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_310_HighlightStyle_FontSize;
                xamlMember.Setter = set_310_HighlightStyle_FontSize;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.ContentStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ContentStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_311_CalendarCellStyle_ContentStyle;
                xamlMember.Setter = set_311_CalendarCellStyle_ContentStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.DecorationStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "DecorationStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_312_CalendarCellStyle_DecorationStyle;
                xamlMember.Setter = set_312_CalendarCellStyle_DecorationStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Items":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>");
                xamlMember.Getter = get_313_RadRadialMenu_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ChildItems":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ChildItems", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem>");
                xamlMember.Getter = get_314_RadialMenuItem_ChildItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ToolTipContent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ToolTipContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_315_RadialMenuItem_ToolTipContent;
                xamlMember.Setter = set_315_RadialMenuItem_ToolTipContent;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.CommandParameter":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_316_RadialMenuItem_CommandParameter;
                xamlMember.Setter = set_316_RadialMenuItem_CommandParameter;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IsEnabled":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_317_RadialMenuItem_IsEnabled;
                xamlMember.Setter = set_317_RadialMenuItem_IsEnabled;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Command":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_318_RadialMenuItem_Command;
                xamlMember.Setter = set_318_RadialMenuItem_Command;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ParentItem":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ParentItem", "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember.Getter = get_319_RadialMenuItem_ParentItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IsSelected":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_320_RadialMenuItem_IsSelected;
                xamlMember.Setter = set_320_RadialMenuItem_IsSelected;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.GroupName":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "GroupName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_321_RadialMenuItem_GroupName;
                xamlMember.Setter = set_321_RadialMenuItem_GroupName;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Selectable":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Selectable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_322_RadialMenuItem_Selectable;
                xamlMember.Setter = set_322_RadialMenuItem_Selectable;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Deselectable":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Deselectable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_323_RadialMenuItem_Deselectable;
                xamlMember.Setter = set_323_RadialMenuItem_Deselectable;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.Header":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_324_RadialMenuItem_Header;
                xamlMember.Setter = set_324_RadialMenuItem_Header;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.IconContent":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IconContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_325_RadialMenuItem_IconContent;
                xamlMember.Setter = set_325_RadialMenuItem_IconContent;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem.ContentSectorBackground":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuItem");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ContentSectorBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_326_RadialMenuItem_ContentSectorBackground;
                xamlMember.Setter = set_326_RadialMenuItem_ContentSectorBackground;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.ShowToolTip":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ShowToolTip", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_327_RadRadialMenu_ShowToolTip;
                xamlMember.Setter = set_327_RadRadialMenu_ShowToolTip;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.IsOpen":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_328_RadRadialMenu_IsOpen;
                xamlMember.Setter = set_328_RadRadialMenu_IsOpen;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.StartAngle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_329_RadRadialMenu_StartAngle;
                xamlMember.Setter = set_329_RadRadialMenu_StartAngle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.InnerNavigationRadiusFactor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "InnerNavigationRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_330_RadRadialMenu_InnerNavigationRadiusFactor;
                xamlMember.Setter = set_330_RadRadialMenu_InnerNavigationRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.InnerRadiusFactor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "InnerRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_331_RadRadialMenu_InnerRadiusFactor;
                xamlMember.Setter = set_331_RadRadialMenu_InnerRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.OuterRadiusFactor":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "OuterRadiusFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_332_RadRadialMenu_OuterRadiusFactor;
                xamlMember.Setter = set_332_RadRadialMenu_OuterRadiusFactor;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.ContentMenuBackgroundStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "ContentMenuBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_333_RadRadialMenu_ContentMenuBackgroundStyle;
                xamlMember.Setter = set_333_RadRadialMenu_ContentMenuBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.NavigationMenuBackgroundStyle":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "NavigationMenuBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_334_RadRadialMenu_NavigationMenuBackgroundStyle;
                xamlMember.Setter = set_334_RadRadialMenu_NavigationMenuBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.CommandService":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "CommandService", "Telerik.UI.Xaml.Controls.Primitives.Menu.CommandService");
                xamlMember.Getter = get_335_RadRadialMenu_CommandService;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.Commands":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Commands", "Telerik.UI.Xaml.Controls.Primitives.CommandCollection`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>");
                xamlMember.Getter = get_336_RadRadialMenu_Commands;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>.Owner":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu>");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Owner", "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember.Getter = get_337_AttachableObject_Owner;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu.TargetElement":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadRadialMenu");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "TargetElement", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_338_RadRadialMenu_TargetElement;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior.AttachTriggers":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadialMenuTriggerBehavior");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "AttachTriggers", "Telerik.UI.Xaml.Controls.Primitives.RadialMenuAttachTriggers");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_339_RadialMenuTriggerBehavior_AttachTriggers;
                xamlMember.Setter = set_339_RadialMenuTriggerBehavior_AttachTriggers;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>.Owner":
                userType = (global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.AttachableObject`1<Windows.UI.Xaml.FrameworkElement>");
                xamlMember = new global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlMember(this, "Owner", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_340_AttachableObject_Owner;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlSystemBaseType
    {
        global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::SAMVoteApp.SAMVoteApp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


